{"version":3,"sources":["../../../../src/plugins/lokijs/rx-storage-instance-loki.ts"],"names":["createLokiStorageInstance","storage","params","databaseSettings","instance","RxStorageInstanceLoki","databaseName","collectionName","schema","internals","options","multiInstance","leaderElector","awaitLeadership","then","localState","createLokiLocalState","databaseState","indices","indexes","forEach","idx","Array","isArray","push","primaryKey","collectionOptions","Object","assign","collection","unique","LOKIJS_COLLECTION_DEFAULT_OPTIONS","database","addCollection","collections","changesCollectionName","CHANGES_COLLECTION_SUFFIX","changesCollectionOptions","changesCollection","ret","instanceId","changes$","Subject","lastChangefeedSequence","closed","primaryPath","OPEN_LOKIJS_STORAGE_INSTANCES","add","broadcastChannel","addEventListener","msg","addChangeDocumentMeta","id","lastDoc","chain","simplesort","limit","data","sequence","nextFeedSequence","insert","bulkWrite","documentWrites","length","args","success","error","eventBulk","events","writeRow","startTime","document","documentInDb","by","newRevision","insertedIsDeleted","_deleted","writeDoc","_rev","_attachments","insertData","$lastWriteAt","eventId","documentId","change","doc","operation","previous","endTime","revInDb","err","isError","status","newRevHeight","isDeleted","$loki","update","saveQueue","addWrite","next","bulkAddRevisions","documents","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","storeAtLoki","findDocumentsById","ids","deleted","query","preparedQuery","find","selector","sort","skip","offset","foundDocuments","map","lokiDoc","getAttachmentData","_documentId","_attachmentId","Error","getChangedDocuments","desc","direction","operator","sinceSequence","changedDocuments","result","useForLastSequence","lastSequence","changeStream","asObservable","close","complete","dbState","run","remove","removeCollection","name"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    promiseWait,\n    createRevision,\n    getHeightOfRevision,\n    parseRevision,\n    lastOfArray,\n    flatClone,\n    now,\n    ensureNotFalsy,\n    randomCouchString\n} from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageBulkWriteError,\n    RxStorageQueryResult,\n    BlobBuffer,\n    ChangeStreamOnceOptions,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageChangedDocumentMeta,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk\n} from '../../types';\nimport {\n    CHANGES_COLLECTION_SUFFIX,\n    closeLokiCollections,\n    getLokiDatabase,\n    getLokiEventKey,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    removeLokiLeaderElectorReference,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest\n} from './lokijs-helper';\nimport type {\n    Collection\n} from 'lokijs';\nimport type { RxStorageLoki } from './rx-storage-lokijs';\n\nlet instanceId = now();\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings\n> {\n\n    public readonly primaryPath: keyof RxDocType;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private lastChangefeedSequence: number = 0;\n    public readonly instanceId = instanceId++;\n\n    public closed = false;\n\n    constructor(\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', async (msg) => handleRemoteRequest(this, msg));\n            });\n        }\n    }\n\n    /**\n     * Adds an entry to the changes feed\n     * that can be queried to check which documents have been\n     * changed since sequence X.\n     */\n    private async addChangeDocumentMeta(id: string) {\n        const localState = await ensureNotFalsy(this.internals.localState);\n        if (!this.lastChangefeedSequence) {\n            const lastDoc = localState.changesCollection\n                .chain()\n                .simplesort('sequence', true)\n                .limit(1)\n                .data()[0];\n            if (lastDoc) {\n                this.lastChangefeedSequence = lastDoc.sequence;\n            }\n        }\n\n        const nextFeedSequence = this.lastChangefeedSequence + 1;\n        localState.changesCollection.insert({\n            id,\n            sequence: nextFeedSequence\n        });\n        this.lastChangefeedSequence = nextFeedSequence;\n    }\n\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[]): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documentWrites.forEach(writeRow => {\n            const startTime = now();\n            const id: string = writeRow.document[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n\n            if (!documentInDb) {\n                // insert new document\n                const newRevision = '1-' + createRevision(writeRow.document);\n\n                /**\n                 * It is possible to insert already deleted documents,\n                 * this can happen on replication.\n                 */\n                const insertedIsDeleted = writeRow.document._deleted ? true : false;\n\n                const writeDoc = Object.assign(\n                    {},\n                    writeRow.document,\n                    {\n                        _rev: newRevision,\n                        _deleted: insertedIsDeleted,\n                        // TODO attachments are currently not working with lokijs\n                        _attachments: {} as any\n                    }\n                );\n                const insertData: any = flatClone(writeDoc);\n                insertData.$lastWriteAt = startTime;\n                localState.collection.insert(insertData);\n                if (!insertedIsDeleted) {\n                    this.addChangeDocumentMeta(id);\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change: {\n                            doc: writeDoc,\n                            id,\n                            operation: 'INSERT',\n                            previous: null\n                        },\n                        startTime,\n                        endTime: now()\n                    });\n                }\n                ret.success[id] = writeDoc;\n            } else {\n                // update existing document\n                const revInDb: string = documentInDb._rev;\n\n                // inserting a deleted document is possible\n                // without sending the previous data.\n                if (!writeRow.previous && documentInDb._deleted) {\n                    writeRow.previous = documentInDb;\n                }\n\n                if (\n                    (\n                        !writeRow.previous &&\n                        !documentInDb._deleted\n                    ) ||\n                    (\n                        !!writeRow.previous &&\n                        revInDb !== writeRow.previous._rev\n                    )\n                ) {\n                    // conflict error\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: id,\n                        writeRow: writeRow\n                    };\n                    ret.error[id] = err;\n                } else {\n                    const newRevHeight = getHeightOfRevision(revInDb) + 1;\n                    const newRevision = newRevHeight + '-' + createRevision(writeRow.document);\n                    const isDeleted = !!writeRow.document._deleted;\n                    const writeDoc: any = Object.assign(\n                        {},\n                        writeRow.document,\n                        {\n                            $loki: documentInDb.$loki,\n                            $lastWriteAt: startTime,\n                            _rev: newRevision,\n                            _deleted: isDeleted,\n                            // TODO attachments are currently not working with lokijs\n                            _attachments: {}\n                        }\n                    );\n                    localState.collection.update(writeDoc);\n                    this.addChangeDocumentMeta(id);\n\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (writeRow.previous && writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && !writeDoc._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: writeRow.previous,\n                            doc: stripLokiKey(writeDoc)\n                        };\n                    } else if (writeRow.previous && !writeRow.previous._deleted && writeDoc._deleted) {\n                        /**\n                         * On delete, we send the 'new' rev in the previous property,\n                         * to have the equal behavior as pouchdb.\n                         */\n                        const previous = flatClone(writeRow.previous);\n                        previous._rev = newRevision;\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous,\n                            doc: null\n                        };\n                    }\n                    if (!change) {\n                        throw newRxError('SNH', { args: { writeRow } });\n                    }\n                    eventBulk.events.push({\n                        eventId: getLokiEventKey(false, id, newRevision),\n                        documentId: id,\n                        change,\n                        startTime,\n                        endTime: now()\n                    });\n                    ret.success[id] = stripLokiKey(writeDoc);\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n        return ret;\n    }\n\n    async bulkAddRevisions(documents: RxDocumentData<RxDocType>[]): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkAddRevisions', [documents]);\n        }\n\n        /**\n         * lokijs is in memory and non-async, so we emulate async behavior\n         * to ensure all RxStorage implementations behave equal.\n         */\n        await promiseWait(0);\n\n        const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>> = {\n            id: randomCouchString(10),\n            events: []\n        };\n        documents.forEach(docData => {\n            const startTime = now();\n            const id: string = docData[this.primaryPath] as any;\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (!documentInDb) {\n                // document not here, so we can directly insert\n                const insertData: any = flatClone(docData);\n                insertData.$lastWriteAt = startTime;\n                localState.collection.insert(insertData);\n                eventBulk.events.push({\n                    documentId: id,\n                    eventId: getLokiEventKey(false, id, docData._rev),\n                    change: {\n                        doc: docData,\n                        id,\n                        operation: 'INSERT',\n                        previous: null\n                    },\n                    startTime,\n                    endTime: now()\n                });\n                this.addChangeDocumentMeta(id);\n            } else {\n                const newWriteRevision = parseRevision(docData._rev);\n                const oldRevision = parseRevision(documentInDb._rev);\n\n                let mustUpdate: boolean = false;\n                if (newWriteRevision.height !== oldRevision.height) {\n                    // height not equal, compare base on height\n                    if (newWriteRevision.height > oldRevision.height) {\n                        mustUpdate = true;\n                    }\n                } else if (newWriteRevision.hash > oldRevision.hash) {\n                    // equal height but new write has the 'winning' hash\n                    mustUpdate = true;\n                }\n                if (mustUpdate) {\n                    const storeAtLoki = flatClone(docData) as any;\n                    storeAtLoki.$loki = documentInDb.$loki;\n                    storeAtLoki.$lastWriteAt = startTime;\n                    localState.collection.update(storeAtLoki);\n                    let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\n                    if (documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'INSERT',\n                            previous: null,\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && !docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'UPDATE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: docData\n                        };\n                    } else if (!documentInDb._deleted && docData._deleted) {\n                        change = {\n                            id,\n                            operation: 'DELETE',\n                            previous: stripLokiKey(documentInDb),\n                            doc: null\n                        };\n                    } else if (documentInDb._deleted && docData._deleted) {\n                        change = null;\n                    }\n                    if (change) {\n                        eventBulk.events.push({\n                            documentId: id,\n                            eventId: getLokiEventKey(false, id, docData._rev),\n                            change,\n                            startTime,\n                            endTime: now()\n                        });\n                        this.addChangeDocumentMeta(id);\n                    }\n                }\n            }\n        });\n        localState.databaseState.saveQueue.addWrite();\n        this.changes$.next(eventBulk);\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret[id] = stripLokiKey(documentInDb);\n            }\n        });\n        return ret;\n    }\n    async query(preparedQuery: MangoQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQuery]);\n        }\n\n        let query = localState.collection\n            .chain()\n            .find(preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            query = query.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n        /**\n         * Offset must be used before limit in LokiJS\n         * @link https://github.com/techfort/LokiJS/issues/570\n         */\n        if (preparedQuery.skip) {\n            query = query.offset(preparedQuery.skip);\n        }\n\n        if (preparedQuery.limit) {\n            query = query.limit(preparedQuery.limit);\n        }\n\n        const foundDocuments = query.data().map(lokiDoc => stripLokiKey(lokiDoc));\n        return {\n            documents: foundDocuments\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string): Promise<BlobBuffer> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: RxStorageChangedDocumentMeta[];\n        lastSequence: number;\n    }> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'getChangedDocuments', [options]);\n        }\n\n        const desc = options.direction === 'before';\n        const operator = options.direction === 'after' ? '$gt' : '$lt';\n\n        let query = localState.changesCollection\n            .chain()\n            .find({\n                sequence: {\n                    [operator]: options.sinceSequence\n                }\n            })\n            .simplesort(\n                'sequence',\n                desc\n            );\n        if (options.limit) {\n            query = query.limit(options.limit);\n        }\n        const changedDocuments: RxStorageChangedDocumentMeta[] = query\n            .data()\n            .map(result => ({\n                id: result.id,\n                sequence: result.sequence\n            }));\n\n        const useForLastSequence = !desc ? lastOfArray(changedDocuments) : changedDocuments[0];\n\n        const ret: {\n            changedDocuments: RxStorageChangedDocumentMeta[];\n            lastSequence: number;\n        } = {\n            changedDocuments,\n            lastSequence: useForLastSequence ? useForLastSequence.sequence : options.sinceSequence\n        }\n\n        return ret;\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n    async close(): Promise<void> {\n        this.closed = true;\n        this.changes$.complete();\n        OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n\n        if (this.internals.localState) {\n            const localState = await this.internals.localState;\n            const dbState = await getLokiDatabase(\n                this.databaseName,\n                this.databaseSettings\n            );\n            await dbState.saveQueue.run();\n            await closeLokiCollections(\n                this.databaseName,\n                [\n                    localState.collection,\n                    localState.changesCollection\n                ]\n            );\n        }\n        removeLokiLeaderElectorReference(this.storage, this.databaseName);\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(this.collectionName);\n        localState.databaseState.database.removeCollection(localState.changesCollection.name);\n        this.close();\n    }\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!Array.isArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    /**\n     * TODO disable stuff we do not need from CollectionOptions\n     */\n    const collectionOptions: Partial<CollectionOptions<RxDocumentData<RxDocType>>> = Object.assign(\n        {},\n        params.options.collection,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: Collection = databaseState.database.addCollection(\n        params.collectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n\n    const changesCollectionName = params.collectionName + CHANGES_COLLECTION_SUFFIX;\n    const changesCollectionOptions = Object.assign({\n        unique: ['eventId'],\n        indices: ['sequence']\n    }, LOKIJS_COLLECTION_DEFAULT_OPTIONS)\n    const changesCollection: Collection = databaseState.database.addCollection(\n        changesCollectionName,\n        changesCollectionOptions\n    );\n    databaseState.collections[params.collectionName] = changesCollection;\n\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection,\n        changesCollection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(storage, params.databaseName);\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    /**\n     * Directly create the localState if the db becomes leader.\n     */\n    if (params.multiInstance) {\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => mustUseLocalState(instance));\n    }\n\n\n    return instance;\n}\n"],"file":"rx-storage-instance-loki.js"}