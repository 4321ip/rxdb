{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-pouchdb.ts"],"names":["createIndexesOnPouch","pouch","schema","indexes","primaryKey","getIndexes","before","existingIndexes","Set","map","idx","name","Promise","all","indexMaybeArray","indexArray","Array","isArray","key","indexName","join","has","createIndex","ddoc","index","fields","RxStoragePouch","adapter","pouchSettings","statics","RxStoragePouchStatics","checkPouchAdapter","createPouch","location","options","pouchDbParameters","settings","pouchDBOptions","Object","assign","PouchDB","createStorageInstance","params","pouchLocation","getPouchLocation","databaseName","collectionName","version","RxStorageInstancePouch","createKeyObjectStorageInstance","useOptions","auto_compaction","revs_limit","RxStorageKeyObjectInstancePouch","adapters","leveldb","dbName","schemaVersion","prefix","includes","split","last","pop","ret","getRxStoragePouch","Error","storage"],"mappings":"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","sourcesContent":["\nimport type {\n    PouchDBInstance,\n    PouchSettings,\n    RxJsonSchema,\n    RxStorageInstanceCreationParams,\n    RxStorage,\n    RxKeyObjectStorageInstanceCreationParams,\n    MangoQuery,\n    MangoQuerySortPart,\n    RxDocumentWriteData,\n    PreparedQuery,\n    MangoQuerySortDirection,\n    RxStorageStatics,\n} from '../../types';\n\nimport {\n    flatClone,\n    adapterObject\n} from '../../util';\nimport {\n    isLevelDown,\n    PouchDB\n} from './pouch-db';\nimport { newRxError } from '../../rx-error';\n\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport { RxStorageInstancePouch } from './rx-storage-instance-pouch';\nimport { RxStorageKeyObjectInstancePouch } from './rx-storage-key-object-instance-pouch';\nimport {\n    PouchStorageInternals\n} from './pouchdb-helper';\nimport { RxStoragePouchStatics } from './pouch-statics';\nexport class RxStoragePouch implements RxStorage<PouchStorageInternals, PouchSettings> {\n    public name: string = 'pouchdb';\n    public statics = RxStoragePouchStatics;\n\n    constructor(\n        public adapter: any,\n        public pouchSettings: PouchSettings = {}\n    ) {\n        checkPouchAdapter(adapter);\n    }\n\n    private async createPouch(\n        location: string,\n        options: PouchSettings\n    ): Promise<PouchDBInstance> {\n        const pouchDbParameters = {\n            location: location,\n            adapter: adapterObject(this.adapter),\n            settings: options\n        };\n        const pouchDBOptions = Object.assign(\n            {},\n            pouchDbParameters.adapter,\n            this.pouchSettings,\n            pouchDbParameters.settings\n        );\n        const pouch = new PouchDB(\n            pouchDbParameters.location,\n            pouchDBOptions\n        ) as PouchDBInstance;\n\n        /**\n         * In the past we found some errors where the PouchDB is not directly useable\n         * so we we had to call .info() first to ensure it can be used.\n         * I commented this out for now to get faster database/collection creation.\n         * We might have to add this again if something fails.\n         */\n        // await pouch.info();\n\n        return pouch;\n    }\n\n    public async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, PouchSettings>\n    ): Promise<RxStorageInstancePouch<RxDocType>> {\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n        await createIndexesOnPouch(pouch, params.schema);\n        return new RxStorageInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n\n    public async createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<PouchSettings>\n    ): Promise<RxStorageKeyObjectInstancePouch> {\n        const useOptions = flatClone(params.options);\n        // no compaction because this only stores local documents\n        useOptions.auto_compaction = false;\n        useOptions.revs_limit = 1;\n\n        /**\n         * TODO shouldnt we use a different location\n         * for the local storage? Or at least make sure we\n         * reuse the same pouchdb instance?\n         */\n        const pouchLocation = getPouchLocation(\n            params.databaseName,\n            params.collectionName,\n            0\n        );\n        const pouch = await this.createPouch(\n            pouchLocation,\n            params.options\n        );\n\n        return new RxStorageKeyObjectInstancePouch(\n            params.databaseName,\n            params.collectionName,\n            {\n                pouch\n            },\n            params.options\n        );\n    }\n}\n\n/**\n * Checks if all is ok with the given adapter,\n * else throws an error.\n */\nexport function checkPouchAdapter(adapter: string | any) {\n    if (typeof adapter === 'string') {\n        // TODO make a function hasAdapter()\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters[adapter]) {\n            throw newRxError('DB9', {\n                adapter\n            });\n        }\n    } else {\n        isLevelDown(adapter);\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters.leveldb) {\n            throw newRxError('DB10', {\n                adapter\n            });\n        }\n    }\n}\n\n/**\n * Creates the indexes of the schema inside of the pouchdb instance.\n * Will skip indexes that already exist.\n */\nexport async function createIndexesOnPouch(\n    pouch: PouchDBInstance,\n    schema: RxJsonSchema<any>\n): Promise<void> {\n    if (!schema.indexes) {\n        return;\n    }\n\n    const primaryKey = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n    const before = await pouch.getIndexes();\n    const existingIndexes: Set<string> = new Set(\n        before.indexes.map(idx => idx.name)\n    );\n\n    await Promise.all(\n        schema.indexes.map(async (indexMaybeArray) => {\n            let indexArray: string[] = Array.isArray(indexMaybeArray) ? indexMaybeArray : [indexMaybeArray];\n\n            /**\n             * replace primary key with _id\n             * because that is the enforced primary key on pouchdb.\n             */\n            indexArray = indexArray.map(key => {\n                if (key === primaryKey) {\n                    return '_id';\n                } else {\n                    return key;\n                }\n            });\n\n            const indexName = 'idx-rxdb-index-' + indexArray.join(',');\n            if (existingIndexes.has(indexName)) {\n                // index already exists\n                return;\n            }\n            /**\n             * TODO we might have even better performance by doing a bulkDocs\n             * on index creation\n             */\n            return pouch.createIndex({\n                name: indexName,\n                ddoc: indexName,\n                index: {\n                    fields: indexArray\n                }\n            });\n        })\n    );\n}\n\n/**\n * returns the pouchdb-database-name\n */\nexport function getPouchLocation(\n    dbName: string,\n    collectionName: string,\n    schemaVersion: number\n): string {\n    const prefix = dbName + '-rxdb-' + schemaVersion + '-';\n    if (!collectionName.includes('/')) {\n        return prefix + collectionName;\n    } else {\n        // if collectionName is a path, we have to prefix the last part only\n        const split = collectionName.split('/');\n        const last = split.pop();\n\n        let ret = split.join('/');\n        ret += '/' + prefix + last;\n        return ret;\n    }\n}\n\nexport function getRxStoragePouch(\n    adapter: any,\n    pouchSettings?: PouchSettings\n): RxStoragePouch {\n    if (!adapter) {\n        throw new Error('adapter missing');\n    }\n    const storage = new RxStoragePouch(adapter, pouchSettings);\n    return storage;\n}\n"],"file":"rx-storage-pouchdb.js"}