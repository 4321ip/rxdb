{"version":3,"sources":["../../../../src/plugins/replication/replication-checkpoint.ts"],"names":["pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","setLastPullDocument","collection","replicationIdentifier","doc","_id","pullLastDocumentId","localDocumentsStore","localDoc","document","_attachments","newDoc","previous","getLastPullDocument","getChangesSinceLastPushSequence","batchSize","getLastPushSequence","lastPushSequence","changedDocs","lastSequence","retry","Map","storageInstance","getChangedDocuments","sinceSequence","limit","direction","changesResults","changedDocuments","length","findDocumentsById","map","row","id","docs","forEach","has","changedDoc","args","_rev","set","sequence","size","setLastPushSequence","pushSequenceId","res"],"mappings":"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","sourcesContent":["import type {\n    RxCollection,\n    RxLocalDocumentData,\n    RxDocumentData,\n    ReplicationCheckpointDocument\n} from '../../types';\nimport {\n    findLocalDocument,\n    writeSingleLocal\n} from '../../rx-storage-helper';\nimport { flatClone } from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { wasRevisionfromPullReplication } from './revision-flag';\n\n//\n// things for the push-checkpoint\n//\n\nconst pushSequenceId = (replicationIdentifier: string) => 'replication-checkpoint-push-' + replicationIdentifier;\nconst pullLastDocumentId = (replicationIdentifier: string) => 'replication-checkpoint-pull-' + replicationIdentifier;\n\n\n/**\n * Get the last push checkpoint\n */\nexport async function getLastPushSequence(\n    collection: RxCollection,\n    replicationIdentifier: string\n): Promise<number> {\n    const doc = await findLocalDocument<ReplicationCheckpointDocument>(\n        collection.localDocumentsStore,\n        pushSequenceId(replicationIdentifier)\n    );\n    if (!doc) {\n        return 0;\n    } else {\n        return doc.value;\n    }\n}\n\nexport async function setLastPushSequence(\n    collection: RxCollection,\n    replicationIdentifier: string,\n    sequence: number\n): Promise<ReplicationCheckpointDocument> {\n    const _id = pushSequenceId(replicationIdentifier);\n\n    const doc = await findLocalDocument<ReplicationCheckpointDocument>(\n        collection.localDocumentsStore,\n        _id\n    );\n    if (!doc) {\n        const res = await writeSingleLocal<ReplicationCheckpointDocument>(\n            collection.localDocumentsStore,\n            {\n                document: {\n                    _id,\n                    value: sequence,\n                    _attachments: {}\n                }\n            }\n        );\n        return res as any;\n    } else {\n        const newDoc = flatClone(doc);\n        newDoc.value = sequence;\n        const res = await writeSingleLocal<ReplicationCheckpointDocument>(\n            collection.localDocumentsStore,\n            {\n                previous: doc,\n                document: {\n                    _id,\n                    value: sequence,\n                    _attachments: {}\n                }\n            }\n        );\n        return res as any;\n    }\n}\n\n\n\nexport async function getChangesSinceLastPushSequence<RxDocType>(\n    collection: RxCollection<RxDocType, any>,\n    replicationIdentifier: string,\n    batchSize = 10\n): Promise<{\n    changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n        sequence: number;\n    }>;\n    lastSequence: number;\n}> {\n    let lastPushSequence = await getLastPushSequence(\n        collection,\n        replicationIdentifier\n    );\n\n    let retry = true;\n    let lastSequence: number = lastPushSequence;\n    const changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n        sequence: number;\n    }> = new Map();\n\n    /**\n     * it can happen that all docs in the batch\n     * do not have to be replicated.\n     * Then we have to continue grapping the feed\n     * until we reach the end of it\n     */\n    while (retry) {\n\n        const changesResults = await collection.storageInstance.getChangedDocuments({\n            sinceSequence: lastPushSequence,\n            limit: batchSize,\n            direction: 'after'\n        });\n        lastSequence = changesResults.lastSequence;\n\n        // optimisation shortcut, do not proceed if there are no changed documents\n        if (changesResults.changedDocuments.length === 0) {\n            retry = false;\n            continue;\n        }\n\n        const docs = await collection.storageInstance.findDocumentsById(\n            changesResults.changedDocuments.map(row => row.id),\n            true\n        );\n\n        changesResults.changedDocuments.forEach((row) => {\n            const id = row.id;\n            if (changedDocs.has(id)) {\n                return;\n            }\n            const changedDoc = docs[id];\n            if (!changedDoc) {\n                throw newRxError('SNH', { args: { docs } });\n            }\n\n            /**\n             * filter out changes with revisions resulting from the pull-stream\n             * so that they will not be upstreamed again\n             */\n            if (\n                wasRevisionfromPullReplication(\n                    replicationIdentifier,\n                    changedDoc._rev\n                )\n            ) {\n                return false;\n            }\n\n            changedDocs.set(id, {\n                id,\n                doc: changedDoc,\n                sequence: row.sequence\n            });\n        });\n\n\n        if (changedDocs.size < batchSize && changesResults.changedDocuments.length === batchSize) {\n            // no pushable docs found but also not reached the end -> re-run\n            lastPushSequence = lastSequence;\n            retry = true;\n        } else {\n            retry = false;\n        }\n    }\n\n    return {\n        changedDocs,\n        lastSequence\n    };\n}\n\n\n\n//\n// things for pull-checkpoint\n//\n\nexport async function getLastPullDocument<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    replicationIdentifier: string,\n): Promise<RxDocumentData<RxDocType> | null> {\n    const localDoc = await findLocalDocument<any>(\n        collection.localDocumentsStore,\n        pullLastDocumentId(replicationIdentifier)\n    );\n    if (!localDoc) {\n        return null;\n    } else {\n        return localDoc.doc;\n    }\n}\n\nexport async function setLastPullDocument(\n    collection: RxCollection,\n    replicationIdentifier: string,\n    doc: any\n): Promise<{ _id: string }> {\n    const _id = pullLastDocumentId(replicationIdentifier);\n\n    const localDoc: RxLocalDocumentData = await findLocalDocument<any>(\n        collection.localDocumentsStore,\n        _id\n    );\n\n    if (!localDoc) {\n        return writeSingleLocal(\n            collection.localDocumentsStore,\n            {\n                document: {\n                    _id,\n                    doc,\n                    _attachments: {}\n                }\n            }\n        );\n    } else {\n        const newDoc = flatClone(localDoc);\n        newDoc.doc = doc;\n        return writeSingleLocal(\n            collection.localDocumentsStore,\n            {\n                previous: localDoc,\n                document: newDoc\n            }\n        );\n    }\n}\n"],"file":"replication-checkpoint.js"}