{"version":3,"sources":["../../../../src/plugins/worker/non-worker.ts"],"names":["WORKER_BY_INPUT","Map","RxStorageWorker","settings","statics","name","workerInput","workerPromise","get","Worker","set","createStorageInstance","params","worker","instanceId","RxStorageInstanceWorker","databaseName","collectionName","schema","rxStorage","options","createKeyObjectStorageInstance","RxStorageKeyObjectInstanceWorker","internals","changes$","Subject","subs","push","changeStream","subscribe","ev","next","bulkWrite","documentWrites","bulkAddRevisions","documents","findDocumentsById","ids","deleted","query","preparedQuery","getAttachmentData","documentId","attachmentId","getChangedDocuments","asObservable","close","forEach","sub","unsubscribe","remove","bulkWriteLocal","findLocalDocumentsById","getRxStorageWorker","storage"],"mappings":"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","sourcesContent":["import { Observable, Subject, Subscription } from 'rxjs';\nimport { spawn, Worker } from 'threads';\nimport type {\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstanceCreationParams,\n    RxStorageInstance,\n    BlobBuffer,\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    RxDocumentData,\n    RxStorageBulkWriteResponse,\n    RxStorageChangedDocumentMeta,\n    RxStorageChangeEvent,\n    RxStorageQueryResult,\n    RxStorageKeyObjectInstance,\n    BulkWriteLocalRow,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxKeyObjectStorageInstanceCreationParams,\n    EventBulk,\n    RxStorageStatics\n} from '../../types';\nimport { InWorkerStorage } from './in-worker';\n\ndeclare type WorkerStorageInternals = {\n    rxStorage: RxStorageWorker;\n    instanceId: number;\n    worker: InWorkerStorage;\n}\ndeclare type RxStorageWorkerSettings = {\n    statics: RxStorageStatics;\n    workerInput: any;\n}\n\n/**\n * We have no way to detect if a worker is no longer needed.\n * Instead we reuse open workers so that creating many databases,\n * does not flood the OS by opening many threads.\n */\nconst WORKER_BY_INPUT: Map<any, Promise<InWorkerStorage>> = new Map();\n\nexport class RxStorageWorker implements RxStorage<WorkerStorageInternals, any> {\n    public name = 'worker';\n\n    public readonly workerPromise: Promise<InWorkerStorage>;\n    constructor(\n        public readonly settings: RxStorageWorkerSettings,\n        public readonly statics: RxStorageStatics\n    ) {\n        const workerInput = this.settings.workerInput;\n        let workerPromise = WORKER_BY_INPUT.get(workerInput);\n        if (!workerPromise) {\n            workerPromise = spawn<InWorkerStorage>(new Worker(this.settings.workerInput)) as any;\n            WORKER_BY_INPUT.set(workerInput, workerPromise as any);\n        }\n        this.workerPromise = workerPromise as any;\n    }\n\n    async createStorageInstance<RxDocType>(\n        params: RxStorageInstanceCreationParams<RxDocType, any>\n    ): Promise<RxStorageInstanceWorker<RxDocType>> {\n        const worker = await this.workerPromise;\n        const instanceId = await worker.createStorageInstance(params);\n        return new RxStorageInstanceWorker(\n            params.databaseName,\n            params.collectionName,\n            params.schema,\n            {\n                rxStorage: this,\n                instanceId,\n                worker\n            },\n            params.options\n        );\n    }\n\n    public async createKeyObjectStorageInstance(\n        params: RxKeyObjectStorageInstanceCreationParams<any>\n    ): Promise<RxStorageKeyObjectInstanceWorker> {\n        const worker = await this.workerPromise;\n        const instanceId = await worker.createKeyObjectStorageInstance(params);\n        return new RxStorageKeyObjectInstanceWorker(\n            params.databaseName,\n            params.collectionName,\n            {\n                rxStorage: this,\n                worker,\n                instanceId\n            },\n            params.options\n        );\n    }\n}\n\n\nexport class RxStorageInstanceWorker<DocumentData> implements RxStorageInstance<DocumentData, WorkerStorageInternals, any> {\n\n    /**\n     * threads.js uses observable-fns instead of rxjs\n     * so we have to transform it.\n     */\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>> = new Subject();\n    private subs: Subscription[] = [];\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<DocumentData>>,\n        public readonly internals: WorkerStorageInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            this.internals.worker.changeStream(\n                this.internals.instanceId\n            ).subscribe(ev => this.changes$.next(ev as any))\n        );\n\n    }\n\n    bulkWrite(documentWrites: BulkWriteRow<DocumentData>[]): Promise<RxStorageBulkWriteResponse<DocumentData>> {\n        return this.internals.worker.bulkWrite(\n            this.internals.instanceId,\n            documentWrites\n        );\n    }\n    bulkAddRevisions(documents: RxDocumentData<DocumentData>[]): Promise<void> {\n        return this.internals.worker.bulkAddRevisions(\n            this.internals.instanceId,\n            documents\n        );\n    }\n    findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<DocumentData> }> {\n        return this.internals.worker.findDocumentsById(\n            this.internals.instanceId,\n            ids,\n            deleted\n        );\n    }\n    query(preparedQuery: any): Promise<RxStorageQueryResult<DocumentData>> {\n        return this.internals.worker.query(\n            this.internals.instanceId,\n            preparedQuery\n        );\n    }\n    getAttachmentData(documentId: string, attachmentId: string): Promise<BlobBuffer> {\n        return this.internals.worker.getAttachmentData(\n            this.internals.instanceId,\n            documentId,\n            attachmentId\n        );\n    }\n    getChangedDocuments(options: ChangeStreamOnceOptions): Promise<{ changedDocuments: RxStorageChangedDocumentMeta[]; lastSequence: number; }> {\n        return this.internals.worker.getChangedDocuments(\n            this.internals.instanceId,\n            options\n        );\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<DocumentData>>>> {\n        return this.changes$.asObservable();\n    }\n    close(): Promise<void> {\n        this.subs.forEach(sub => sub.unsubscribe());\n        return this.internals.worker.close(\n            this.internals.instanceId\n        );\n    }\n    remove(): Promise<void> {\n        return this.internals.worker.remove(\n            this.internals.instanceId\n        );\n    }\n}\n\n\nexport class RxStorageKeyObjectInstanceWorker implements RxStorageKeyObjectInstance<WorkerStorageInternals, any> {\n\n    /**\n     * threads.js uses observable-fns instead of rxjs\n     * so we have to transform it.\n     */\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>>> = new Subject();\n    private subs: Subscription[] = [];\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly internals: WorkerStorageInternals,\n        public readonly options: Readonly<any>\n    ) {\n        this.subs.push(\n            this.internals.worker.changeStream(\n                this.internals.instanceId\n            ).subscribe(ev => this.changes$.next(ev as any))\n        );\n    }\n    bulkWrite<DocumentData>(\n        documentWrites: BulkWriteLocalRow<DocumentData>[]\n    ): Promise<RxLocalStorageBulkWriteResponse<DocumentData>> {\n        return this.internals.worker.bulkWriteLocal(\n            this.internals.instanceId,\n            documentWrites\n        );\n    }\n    findLocalDocumentsById<DocumentData>(\n        ids: string[]\n    ): Promise<{ [documentId: string]: RxLocalDocumentData<DocumentData> }> {\n        return this.internals.worker.findLocalDocumentsById(\n            this.internals.instanceId,\n            ids\n        );\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any; }>>>> {\n        return this.changes$.asObservable();\n    }\n    close(): Promise<void> {\n        this.subs.forEach(sub => sub.unsubscribe());\n        return this.internals.worker.close(\n            this.internals.instanceId\n        );\n    }\n    remove(): Promise<void> {\n        return this.internals.worker.remove(\n            this.internals.instanceId\n        );\n    }\n}\n\nexport function getRxStorageWorker(\n    settings: RxStorageWorkerSettings\n): RxStorageWorker {\n    const storage = new RxStorageWorker(settings, settings.statics);\n    return storage;\n}\n"],"file":"non-worker.js"}