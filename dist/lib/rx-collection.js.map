{"version":3,"sources":["../../src/rx-collection.ts"],"names":["HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","storageInstance","localDocumentsStore","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","_isInMemory","destroyed","_atomicUpsertQueues","Map","synced","hooks","_subs","_repStates","Set","_docCache","_queryCache","_crypter","_observable$","_changeEventBuffer","_applyHookFunctions","asRxCollection","prepare","wasCreatedBefore","password","eventBulks$","pipe","changeEventBulk","collectionName","events","subDocs","changeStream","subscribe","eventBulk","id","internal","storageToken","map","ev","databaseToken","token","$emit","push","subLocalDocs","cE","isLocal","doc","get","documentId","_handleChangeEvent","migrationNeeded","getDataMigrator","migrate","batchSize","migratePromise","_queryStorageInstance","rxQuery","limit","noDecrypt","preparedQuery","getPreparedQuery","lockedRun","query","queryResult","docs","documents","insert","json","tempDoc","_isTemporary","data","toJSON","useJson","newDoc","_runHooks","validate","document","insertResult","_dataSync$","next","bulkInsert","docsData","length","success","error","useDocs","docData","useDocData","Promise","all","then","insertDocs","d","docsMap","forEach","set","primaryPath","bulkWrite","results","successEntries","Object","entries","rxDocuments","key","writtenDocData","_rev","primary","values","bulkRemove","ids","findByIds","rxDocumentMap","Array","from","rxDocument","removeDocs","writeDoc","_deleted","previous","successIds","keys","upsert","jsonSchema","findOne","exec","existing","deleted","atomicUpdate","atomicUpsert","queue","has","PROMISE_RESOLVE_VOID","_atomicUpsertEnsureRxDocumentExists","wasInserted","inserted","_atomicUpsertUpdate","find","queryObj","selector","isArray","ret","mustBeQueried","findDocumentsById","findByIds$","currentValue","lastChangeEvent","initialPromise","counter","$","resultMap","missedChangeEvents","getFrom","newResult","k","v","filter","rxChangeEvent","includes","op","operation","x","RXJS_SHARE_REPLAY_DEFAULTS","exportJSON","_decrypted","importJSON","_exportedJSON","syncCouchDB","_syncOptions","syncGraphQL","inMemory","addHook","when","fun","parallel","boundFun","bind","runName","series","getHooks","e","instance","tasks","hook","_runHooksSync","newDocument","fillObjectWithDefaults","destroy","PROMISE_RESOLVE_FALSE","_onDestroyCall","sub","unsubscribe","replicationState","cancel","close","collections","remove","removeCollection","_onDestroy","res","collection","colProto","getPrototypeOf","fnName","innerDoc","_data","rxCollection","docFromCache","resolve","createRxCollection","autoMigrate","overwritable","isDevMode","funName","topLevelFields","storageInstanceCreationParams","databaseName","multiInstance","storageInstances","defineProperty","version","err","reject","isRxCollection","obj"],"mappings":"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","sourcesContent":["import {\n    filter,\n    startWith,\n    mergeMap,\n    shareReplay\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    nextTick,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    clone,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    RXJS_SHARE_REPLAY_DEFAULTS\n} from './util';\nimport {\n    _handleToStorageInstance,\n    _handleFromStorageInstance,\n    fillObjectDataBeforeInsert,\n    writeToStorageInstance,\n    createRxCollectionStorageInstances\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    RxQueryBase,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    Crypter,\n    createCrypter\n} from './crypter';\nimport {\n    DocCache,\n    createDocCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport type {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    RxCouchDBReplicationState,\n    MigrationState,\n    SyncOptions,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    SyncOptionsGraphQL,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageBulkWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    RxStorageKeyObjectInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk\n} from './types';\nimport type {\n    RxGraphQLReplicationState\n} from './plugins/replication-graphql';\n\nimport {\n    RxSchema\n} from './rx-schema';\nimport {\n    createWithConstructor as createRxDocumentWithConstructor,\n    isRxDocument\n} from './rx-document';\n\nimport {\n    createRxDocument,\n    getRxDocumentConstructor\n} from './rx-document-prototype-merge';\nimport { storageChangeEventToRxChangeEvent } from './rx-storage-helper';\nimport { overwritable } from './overwritable';\n\nconst HOOKS_WHEN = ['pre', 'post'];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any }\n    > {\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        /**\n         * Stores all 'normal' documents\n         */\n        public storageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        /**\n         * Stores the local documents so that they are not deleted\n         * when a migration runs.\n         */\n        public localDocumentsStore: RxStorageKeyObjectInstance<any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {}\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    /**\n     * returns observable\n     */\n    get $(): Observable<RxChangeEvent<any>> {\n        return this._observable$ as any;\n    }\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    get onDestroy() {\n        if (!this._onDestroy) {\n            this._onDestroy = new Promise(res => this._onDestroyCall = res);\n        }\n        return this._onDestroy;\n    }\n\n    public _isInMemory = false;\n    public destroyed = false;\n    public _atomicUpsertQueues = new Map(); // TODO type\n    // defaults\n    public synced: boolean = false;\n    public hooks: any = {};\n    public _subs: Subscription[] = [];\n\n    // TODO move _repStates into migration plugin\n    public _repStates: Set<RxCouchDBReplicationState> = new Set();\n\n    public _docCache: DocCache<\n        RxDocument<RxDocumentType, OrmMethods>\n    > = createDocCache();\n\n    public _queryCache: QueryCache = createQueryCache();\n    public _crypter: Crypter = {} as Crypter;\n    public _observable$: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n    /**\n     * returns a promise that is resolved when the collection gets destroyed\n     */\n    private _onDestroy?: Promise<void>;\n\n    private _onDestroyCall?: () => void;\n    public async prepare(\n        /**\n         * TODO is this still needed?\n         * set to true if the collection data already exists on this storage adapter\n         */\n        wasCreatedBefore: boolean\n    ): Promise<void> {\n        // we trigger the non-blocking things first and await them later so we can do stuff in the mean time\n\n        this._crypter = createCrypter(this.database.password, this.schema);\n\n        this._observable$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: ensureNotFalsy(this.database.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token\n            };\n            this.database.$emit(changeEventBulk);\n        });\n\n        this._subs.push(subDocs);\n        const subLocalDocs = this.localDocumentsStore.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: ensureNotFalsy(this.database.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    true,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subLocalDocs);\n\n\n        /**\n         * When a write happens to the collection\n         * we find the changed document in the docCache\n         * and tell it that it has to change its data.\n         */\n        this._subs.push(\n            this._observable$\n                .pipe(\n                    filter((cE: RxChangeEvent<RxDocumentType>) => !cE.isLocal)\n                )\n                .subscribe(cE => {\n                    // when data changes, send it to RxDocument in docCache\n                    const doc = this._docCache.get(cE.documentId);\n                    if (doc) {\n                        doc._handleChangeEvent(cE);\n                    }\n                })\n        );\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    /**\n     * wrapps the query function of the storage instance.\n     */\n    async _queryStorageInstance(\n        rxQuery: RxQuery | RxQueryBase,\n        limit?: number,\n        noDecrypt: boolean = false\n    ): Promise<any[]> {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        if (limit) {\n            preparedQuery['limit'] = limit;\n        }\n\n        const queryResult = await this.database.lockedRun(\n            () => this.storageInstance.query(preparedQuery)\n        );\n\n        const docs = queryResult.documents\n            .map((doc: any) => _handleFromStorageInstance(this, doc, noDecrypt));\n        return docs;\n    }\n\n    /**\n     * TODO internally call bulkInsert\n     * to not have duplicated code.\n     */\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        // inserting a temporary-document\n        let tempDoc: RxDocument | null = null;\n        if (isRxDocument(json)) {\n            tempDoc = json as RxDocument;\n            if (!tempDoc._isTemporary) {\n                throw newRxError('COL1', {\n                    data: json\n                });\n            }\n            json = tempDoc.toJSON() as any;\n        }\n\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this as any, json);\n        let newDoc = tempDoc;\n\n        await this._runHooks('pre', 'insert', useJson);\n        this.schema.validate(useJson);\n        const insertResult = await writeToStorageInstance(\n            this,\n            {\n                document: useJson\n            }\n        );\n\n        if (tempDoc) {\n            tempDoc._dataSync$.next(insertResult);\n        } else {\n            newDoc = createRxDocument(this as any, insertResult);\n        }\n\n        await this._runHooks('post', 'insert', useJson, newDoc);\n\n        return newDoc as any;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs: RxDocumentType[] = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this as any, docData);\n            return useDocData;\n        });\n\n        const docs = await Promise.all(\n            useDocs.map(doc => {\n                return this._runHooks('pre', 'insert', doc).then(() => {\n                    this.schema.validate(doc);\n                    return doc;\n                });\n            })\n        );\n\n        const insertDocs: BulkWriteRow<RxDocumentType>[] = docs.map(d => ({\n            document: _handleToStorageInstance(this, d)\n        }));\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        docs.forEach(d => {\n            docsMap.set((d as any)[this.schema.primaryPath] as any, d);\n        });\n\n        const results = await this.database.lockedRun(\n            () => this.storageInstance.bulkWrite(insertDocs)\n        );\n\n        // create documents\n        const successEntries: [string, RxDocumentData<RxDocumentType>][] = Object.entries(results.success);\n        const rxDocuments: any[] = successEntries\n            .map(([key, writtenDocData]) => {\n                const docData: RxDocumentData<RxDocumentType> = getFromMapOrThrow(docsMap, key) as any;\n                docData._rev = writtenDocData._rev;\n                const doc = createRxDocument(this as any, docData);\n                return doc;\n            });\n\n\n        await Promise.all(\n            rxDocuments.map(doc => {\n                return this._runHooks(\n                    'post',\n                    'insert',\n                    docsMap.get(doc.primary),\n                    doc\n                );\n            })\n        );\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[],\n        error: RxStorageBulkWriteError<RxDocumentType>[]\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids);\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = clone(rxDocument.toJSON(true)) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n\n\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: _handleToStorageInstance(this, doc),\n                document: _handleToStorageInstance(this, writeDoc)\n            };\n        });\n\n        const results = await this.database.lockedRun(\n            () => this.storageInstance.bulkWrite(removeDocs)\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments: any[] = successIds.map(id => {\n            return rxDocumentMap.get(id);\n        });\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = useJson[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL3', {\n                primaryPath: this.schema.primaryPath as string,\n                data: useJson,\n                schema: this.schema.jsonSchema\n            });\n        }\n\n        return this.findOne(primary).exec()\n            .then((existing: RxDocument<RxDocumentType, OrmMethods> | null) => {\n                if (existing && !existing.deleted) {\n                    useJson._rev = (existing as any)['_rev'];\n                    return existing.atomicUpdate(() => useJson as any)\n                        .then(() => existing);\n                } else {\n                    return this.insert(json as any);\n                }\n            });\n    }\n\n    /**\n     * upserts to a RxDocument, uses atomicUpdate if document already exists\n     */\n    atomicUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this as any, json);\n        const primary = useJson[this.schema.primaryPath];\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it wont try 2 parallel runs\n        let queue;\n        if (!this._atomicUpsertQueues.has(primary)) {\n            queue = PROMISE_RESOLVE_VOID;\n        } else {\n            queue = this._atomicUpsertQueues.get(primary);\n        }\n        queue = queue\n            .then(() => _atomicUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted: any) => {\n                if (!wasInserted.inserted) {\n                    return _atomicUpsertUpdate(wasInserted.doc, useJson)\n                        /**\n                         * tick here so the event can propagate\n                         * TODO we should not need that here\n                         */\n                        .then(() => nextTick())\n                        .then(() => nextTick())\n                        .then(() => nextTick())\n                        .then(() => wasInserted.doc);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._atomicUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(queryObj?: MangoQueryNoLimit<RxDocumentType> | string): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>\n        | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                }\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            query = createRxQuery('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    async findByIds(\n        ids: string[]\n    ): Promise<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n\n        const ret = new Map();\n        const mustBeQueried: string[] = [];\n\n        // first try to fill from docCache\n        ids.forEach(id => {\n            const doc = this._docCache.get(id);\n            if (doc) {\n                ret.set(id, doc);\n            } else {\n                mustBeQueried.push(id);\n            }\n        });\n\n        // find everything which was not in docCache\n        if (mustBeQueried.length > 0) {\n            const docs = await this.storageInstance.findDocumentsById(mustBeQueried, false);\n            Object.values(docs).forEach(docData => {\n                docData = _handleFromStorageInstance(this, docData);\n                const doc = createRxDocument<RxDocumentType, OrmMethods>(this as any, docData);\n                ret.set(doc.primary, doc);\n            });\n        }\n        return ret;\n    }\n\n    /**\n     * like this.findByIds but returns an observable\n     * that always emitts the current state\n     */\n    findByIds$(\n        ids: string[]\n    ): Observable<Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        let currentValue: Map<string, RxDocument<RxDocumentType, OrmMethods>> | null = null;\n        let lastChangeEvent: number = -1;\n\n        const initialPromise = this.findByIds(ids).then(docsMap => {\n            lastChangeEvent = this._changeEventBuffer.counter;\n            currentValue = docsMap;\n        });\n        return this.$.pipe(\n            startWith(null),\n            mergeMap(ev => initialPromise.then(() => ev)),\n            /**\n             * Because shareReplay with refCount: true\n             * will often subscribe/unsusbscribe\n             * we always ensure that we handled all missed events\n             * since the last subscription.\n             */\n            mergeMap(async (ev) => {\n                const resultMap = ensureNotFalsy(currentValue);\n                const missedChangeEvents = this._changeEventBuffer.getFrom(lastChangeEvent + 1);\n                if (missedChangeEvents === null) {\n                    /**\n                     * changeEventBuffer is of bounds -> we must re-execute over the database\n                     * because we cannot calculate the new results just from the events.\n                     */\n                    const newResult = await this.findByIds(ids);\n                    lastChangeEvent = this._changeEventBuffer.counter;\n                    Array.from(newResult.entries()).forEach(([k, v]) => resultMap.set(k, v));\n                } else {\n                    missedChangeEvents\n                        .filter(rxChangeEvent => ids.includes(rxChangeEvent.documentId))\n                        .forEach(rxChangeEvent => {\n                            const op = rxChangeEvent.operation;\n                            if (op === 'INSERT' || op === 'UPDATE') {\n                                resultMap.set(rxChangeEvent.documentId, this._docCache.get(rxChangeEvent.documentId) as any);\n                            } else {\n                                resultMap.delete(rxChangeEvent.documentId);\n                            }\n                        });\n                }\n                return resultMap;\n            }),\n            filter(x => !!x),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     * When false or omitted and an interface or type is loaded in this collection,\n     * all base properties of the type are typed as `any` since data could be encrypted.\n     */\n    exportJSON(_decrypted: boolean): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(_decrypted?: false): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(_decrypted: boolean = false): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * sync with a CouchDB endpoint\n     */\n    syncCouchDB(_syncOptions: SyncOptions): RxCouchDBReplicationState {\n        throw pluginMissing('replication');\n    }\n\n    /**\n     * sync with a GraphQL endpoint\n     */\n    syncGraphQL(options: SyncOptionsGraphQL<RxDocumentType>): RxGraphQLReplicationState<RxDocumentType> {\n        throw pluginMissing('replication-graphql');\n    }\n\n    /**\n     * Create a replicated in-memory-collection\n     */\n    inMemory(): Promise<RxCollection<RxDocumentType, OrmMethods>> {\n        throw pluginMissing('in-memory');\n    }\n\n\n    /**\n     * HOOKS\n     */\n    addHook(when: string, key: string, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n    getHooks(when: string, key: string) {\n        try {\n            return this.hooks[key][when];\n        } catch (e) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n    }\n\n    _runHooks(when: string, key: string, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: string, key: string, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * creates a temporaryDocument which can be saved later\n     */\n    newDocument(docData: Partial<RxDocumentType> = {}): RxDocument<RxDocumentType, OrmMethods> {\n        docData = this.schema.fillObjectWithDefaults(docData);\n        const doc: any = createRxDocumentWithConstructor(\n            getRxDocumentConstructor(this as any),\n            this as any,\n            docData\n        );\n        doc._isTemporary = true;\n\n        this._runHooksSync('post', 'create', docData, doc);\n        return doc as any;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        if (this._onDestroyCall) {\n            this._onDestroyCall();\n        }\n        this._subs.forEach(sub => sub.unsubscribe());\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        Array.from(this._repStates).forEach(replicationState => replicationState.cancel());\n\n        return Promise\n            .all([\n                this.storageInstance.close(),\n                this.localDocumentsStore.close()\n            ])\n            .then(() => {\n                delete this.database.collections[this.name];\n                this.destroyed = true;\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    remove(): Promise<any> {\n        return this.database.removeCollection(this.name);\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _atomicUpsertUpdate(doc: any, json: any): Promise<any> {\n    return doc.atomicUpdate((innerDoc: any) => {\n        json._rev = innerDoc._rev;\n        innerDoc._data = json;\n        return innerDoc._data;\n    }).then(() => doc);\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _atomicUpsertEnsureRxDocumentExists(\n    rxCollection: RxCollection,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument,\n        inserted: boolean\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docFromCache = rxCollection._docCache.get(primary);\n    if (docFromCache) {\n        return Promise.resolve({\n            doc: docFromCache,\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        cacheReplacementPolicy = defaultCacheReplacementPolicy\n    }: any,\n    wasCreatedBefore: boolean\n): Promise<RxCollection> {\n    // TODO move this check to dev-mode plugin\n    if (overwritable.isDevMode()) {\n        Object.keys(methods)\n            .filter(funName => schema.topLevelFields.includes(funName))\n            .forEach(funName => {\n                throw newRxError('COL18', {\n                    funName\n                });\n            });\n    }\n\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstances(\n        name,\n        database,\n        storageInstanceCreationParams,\n        instanceCreationOptions\n    ).then(storageInstances => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstances.storageInstance,\n            storageInstances.localDocumentsStore,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics\n        );\n\n        return collection\n            .prepare(wasCreatedBefore)\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', collection);\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return Promise\n                    .all([\n                        storageInstances.storageInstance.close(),\n                        storageInstances.localDocumentsStore.close()\n                    ])\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"file":"rx-collection.js"}