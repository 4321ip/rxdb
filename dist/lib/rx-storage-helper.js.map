{"version":3,"sources":["../../src/rx-storage-helper.ts"],"names":["findLocalDocument","instance","id","findLocalDocumentsById","docList","doc","writeSingleLocal","writeRow","bulkWrite","writeResult","Object","keys","error","length","ret","success","writeSingle","getBatch","storage","storageInstance","limit","preparedQuery","statics","prepareQuery","schema","selector","query","result","documents","countAllUndeleted","getAllDocuments","docs","getSingleDocument","documentId","findDocumentsById","results","getAllQueryPrepared","queryResult","allDocs","INTERNAL_STORAGE_NAME","storageChangeEventToRxChangeEvent","isLocal","rxStorageChangeEvent","rxCollection","documentData","change","operation","hookParams","collection","_crypter","decrypt","previousDocumentData","previous","eventId","collectionName","name","undefined","startTime","endTime","overwritable","deepFreezeWhenDevMode"],"mappings":"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","sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { runPluginHooks } from './hooks';\nimport { overwritable } from './overwritable';\nimport { newRxError } from './rx-error';\nimport type {\n    BulkWriteLocalRow,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxLocalDocumentData,\n    RxLocalStorageBulkWriteResponse,\n    RxStorage,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageKeyObjectInstance\n} from './types';\nimport { firstPropertyNameOfObject, firstPropertyValueOfObject } from './util';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\n\n/**\n * returns all NON-LOCAL documents\n * TODO this is pouchdb specific should not be needed\n */\nexport async function getAllDocuments<RxDocType>(\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<RxDocType, any, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n\n    const getAllQueryPrepared = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {}\n        }\n    );\n    const queryResult = await storageInstance.query(getAllQueryPrepared);\n    const allDocs = queryResult.documents;\n    return allDocs;\n}\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | null> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[documentId];\n    if (doc) {\n        return doc;\n    } else {\n        return null;\n    }\n}\n\n\n/**\n * get the number of all undeleted documents\n */\nexport async function countAllUndeleted<DocType>(\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<DocType, any, any>\n): Promise<number> {\n    const docs = await getAllDocuments(\n        storage,\n        storageInstance\n    );\n    return docs.length;\n}\n\n/**\n * get a batch of documents from the storage-instance\n */\nexport async function getBatch<DocType>(\n    storage: RxStorage<any, any>,\n    storageInstance: RxStorageInstance<DocType, any, any>,\n    limit: number\n): Promise<any[]> {\n    if (limit <= 1) {\n        throw newRxError('P1', {\n            limit\n        });\n    }\n\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            limit\n        }\n    );\n    const result = await storageInstance.query(preparedQuery);\n    return result.documents;\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\n/**\n * Writes a single local document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingleLocal<DocumentData>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    writeRow: BulkWriteLocalRow<DocumentData>\n): Promise<RxLocalDocumentData<RxLocalDocumentData>> {\n    const writeResult: RxLocalStorageBulkWriteResponse<DocumentData> = await instance.bulkWrite(\n        [writeRow]\n    );\n\n    if (Object.keys(writeResult.error).length > 0) {\n        const error = firstPropertyValueOfObject(writeResult.error);\n        throw error;\n    } else {\n        const ret = firstPropertyValueOfObject(writeResult.success);\n        return ret;\n    }\n}\n\nexport async function findLocalDocument<DocType>(\n    instance: RxStorageKeyObjectInstance<any, any>,\n    id: string\n): Promise<RxDocumentData<RxLocalDocumentData<DocType>> | null> {\n    const docList = await instance.findLocalDocumentsById([id]);\n    const doc = docList[id];\n    if (!doc) {\n        return null;\n    } else {\n        return doc;\n    }\n}\n\nexport function storageChangeEventToRxChangeEvent<DocType>(\n    isLocal: boolean,\n    rxStorageChangeEvent: RxStorageChangeEvent<DocType>,\n    rxCollection?: RxCollection,\n): RxChangeEvent<DocType> {\n    let documentData;\n    if (rxStorageChangeEvent.change.operation !== 'DELETE') {\n        if (!rxCollection) {\n            documentData = rxStorageChangeEvent.change.doc;\n        } else {\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.doc as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            documentData = hookParams.doc;\n            documentData = rxCollection._crypter.decrypt(documentData);\n        }\n    }\n    let previousDocumentData;\n    if (rxStorageChangeEvent.change.operation !== 'INSERT') {\n        if (!rxCollection) {\n            previousDocumentData = rxStorageChangeEvent.change.previous;\n        } else {\n\n            const hookParams = {\n                collection: rxCollection,\n                doc: rxStorageChangeEvent.change.previous as any\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            previousDocumentData = hookParams.doc;\n            previousDocumentData = rxCollection._crypter.decrypt(previousDocumentData);\n        }\n    }\n    const ret: RxChangeEvent<DocType> = {\n        eventId: rxStorageChangeEvent.eventId,\n        documentId: rxStorageChangeEvent.documentId,\n        collectionName: rxCollection ? rxCollection.name : undefined,\n        startTime: rxStorageChangeEvent.startTime,\n        endTime: rxStorageChangeEvent.endTime,\n        isLocal,\n        operation: rxStorageChangeEvent.change.operation,\n        documentData: overwritable.deepFreezeWhenDevMode(documentData),\n        previousDocumentData: overwritable.deepFreezeWhenDevMode(previousDocumentData)\n    };\n    return ret;\n}\n"],"file":"rx-storage-helper.js"}