{"version":3,"sources":["../../../../src/plugins/replication-graphql/crawling-checkpoint.ts"],"names":["wasRevisionfromPullReplication","GRAPHQL_REPLICATION_PLUGIN_IDENT","findLocalDocument","writeSingleLocal","flatClone","newRxError","runPluginHooks","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","setLastPullDocument","collection","endpointHash","doc","_id","pullLastDocumentId","database","lockedRun","localDocumentsStore","localDoc","document","_attachments","newDoc","previous","getLastPullDocument","getChangesSinceLastPushSequence","batchSize","getLastPushSequence","lastPushSequence","changedDocs","lastSequence","retry","Map","storageInstance","getChangedDocuments","sinceSequence","limit","direction","changesResults","changedDocuments","length","findDocumentsById","map","row","id","plainDocs","docs","Object","entries","forEach","docId","docData","hookParams","set","has","changedDoc","get","args","_rev","sequence","size","setLastPushSequence","pushSequenceId","res"],"mappings":"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","sourcesContent":["import {\n    wasRevisionfromPullReplication,\n    GRAPHQL_REPLICATION_PLUGIN_IDENT\n} from './helper';\nimport type {\n    RxCollection,\n    RxLocalDocumentData,\n    RxDocumentData\n} from '../../types';\nimport {\n    findLocalDocument,\n    writeSingleLocal\n} from '../../rx-storage-helper';\nimport { flatClone } from '../../util';\nimport { newRxError } from '../../rx-error';\nimport { runPluginHooks } from '../../hooks';\n\n/**\n * when the replication starts,\n * we need a way to find out where it ended the last time.\n *\n * For push-replication, we use the storageInstance-sequence:\n * We get the documents newer then the last sequence-id\n * and push them to the server.\n *\n * For pull-replication, we use the last document we got from the server:\n * We send the last document to the queryBuilder()\n * and recieve newer documents sorted in a batch\n */\n\n\n\n//\n// things for the push-checkpoint\n//\n\nconst pushSequenceId = (endpointHash: string) => GRAPHQL_REPLICATION_PLUGIN_IDENT + '-push-checkpoint-' + endpointHash;\n\n/**\n * @return last sequence checkpoint\n */\nexport async function getLastPushSequence(\n    collection: RxCollection,\n    endpointHash: string\n): Promise<number> {\n    const doc = await collection.database.lockedRun(\n        () => findLocalDocument<CheckpointDoc>(\n            collection.localDocumentsStore,\n            pushSequenceId(endpointHash)\n        )\n    );\n    if (!doc) {\n        return 0;\n    } else {\n        return doc.value;\n    }\n}\n\ndeclare type CheckpointDoc = { _id: string; value: number; };\n\nexport async function setLastPushSequence(\n    collection: RxCollection,\n    endpointHash: string,\n    sequence: number\n): Promise<CheckpointDoc> {\n    const _id = pushSequenceId(endpointHash);\n\n    const doc = await collection.database.lockedRun(\n        () => findLocalDocument<CheckpointDoc>(\n            collection.localDocumentsStore,\n            _id\n        )\n    );\n\n    if (!doc) {\n        const res = await collection.database.lockedRun(\n            () => writeSingleLocal<CheckpointDoc>(\n                collection.localDocumentsStore,\n                {\n                    document: {\n                        _id,\n                        value: sequence,\n                        _attachments: {}\n                    }\n                }\n            )\n        );\n        return res as any;\n    } else {\n        const newDoc = flatClone(doc);\n        newDoc.value = sequence;\n        const res = await collection.database.lockedRun(\n            () => writeSingleLocal<CheckpointDoc>(\n                collection.localDocumentsStore,\n                {\n                    previous: doc,\n                    document: {\n                        _id,\n                        value: sequence,\n                        _attachments: {}\n                    }\n                }\n            )\n        );\n        return res as any;\n    }\n}\n\n\nexport async function getChangesSinceLastPushSequence<RxDocType>(\n    collection: RxCollection<RxDocType, any>,\n    endpointHash: string,\n    batchSize = 10\n): Promise<{\n    changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n        sequence: number;\n    }>;\n    lastSequence: number;\n}> {\n    let lastPushSequence = await getLastPushSequence(\n        collection,\n        endpointHash\n    );\n\n    let retry = true;\n    let lastSequence: number = lastPushSequence;\n    const changedDocs: Map<string, {\n        id: string;\n        doc: RxDocumentData<RxDocType>;\n        sequence: number;\n    }> = new Map();\n\n    /**\n     * it can happen that all docs in the batch\n     * do not have to be replicated.\n     * Then we have to continue grapping the feed\n     * until we reach the end of it\n     */\n    while (retry) {\n        const changesResults = await collection.database.lockedRun(\n            () => collection.storageInstance.getChangedDocuments({\n                sinceSequence: lastPushSequence,\n                limit: batchSize,\n                direction: 'after'\n            })\n        );\n        lastSequence = changesResults.lastSequence;\n\n        // optimisation shortcut, do not proceed if there are no changed documents\n        if (changesResults.changedDocuments.length === 0) {\n            retry = false;\n            continue;\n        }\n\n        const plainDocs = await collection.database.lockedRun(\n            () => collection.storageInstance.findDocumentsById(\n                changesResults.changedDocuments.map(row => row.id),\n                true\n            )\n        );\n\n        const docs: Map<string, RxDocumentData<RxDocType>> = new Map();\n\n        Object.entries(plainDocs).forEach(([docId, docData]) => {\n            const hookParams = {\n                collection,\n                doc: docData\n            };\n            runPluginHooks('postReadFromInstance', hookParams);\n            docs.set(docId, hookParams.doc);\n        });\n\n        changesResults.changedDocuments.forEach((row) => {\n            const id = row.id;\n            if (changedDocs.has(id)) {\n                return;\n            }\n            const changedDoc = docs.get(id);\n            if (!changedDoc) {\n                throw newRxError('SNH', { args: { docs } });\n            }\n\n            /**\n             * filter out changes with revisions resulting from the pull-stream\n             * so that they will not be upstreamed again\n             */\n            if (wasRevisionfromPullReplication(\n                endpointHash,\n                changedDoc._rev\n            )) {\n                return false;\n            }\n\n            changedDocs.set(id, {\n                id,\n                doc: changedDoc,\n                sequence: row.sequence\n            });\n        });\n\n\n        if (changedDocs.size < batchSize && changesResults.changedDocuments.length === batchSize) {\n            // no pushable docs found but also not reached the end -> re-run\n            lastPushSequence = lastSequence;\n            retry = true;\n        } else {\n            retry = false;\n        }\n    }\n\n    return {\n        changedDocs,\n        lastSequence\n    };\n}\n\n\n//\n// things for pull-checkpoint\n//\n\n\nconst pullLastDocumentId = (endpointHash: string) => GRAPHQL_REPLICATION_PLUGIN_IDENT + '-pull-checkpoint-' + endpointHash;\n\nexport async function getLastPullDocument<RxDocType>(\n    collection: RxCollection<RxDocType>,\n    endpointHash: string\n): Promise<RxDocType | null> {\n    const localDoc = await collection.database.lockedRun(\n        () => findLocalDocument<any>(\n            collection.localDocumentsStore,\n            pullLastDocumentId(endpointHash)\n        )\n    );\n\n    if (!localDoc) {\n        return null;\n    } else {\n        return localDoc.doc;\n    }\n}\n\nexport async function setLastPullDocument(\n    collection: RxCollection,\n    endpointHash: string,\n    doc: any\n): Promise<{ _id: string }> {\n    const _id = pullLastDocumentId(endpointHash);\n\n    const localDoc: RxLocalDocumentData = await collection.database.lockedRun(\n        () => findLocalDocument<any>(\n            collection.localDocumentsStore,\n            _id\n        )\n    );\n\n    if (!localDoc) {\n        return collection.database.lockedRun(\n            () => writeSingleLocal(\n                collection.localDocumentsStore,\n                {\n                    document: {\n                        _id,\n                        doc,\n                        _attachments: {}\n                    }\n                }\n            )\n        );\n    } else {\n        const newDoc = flatClone(localDoc);\n        newDoc.doc = doc;\n        return collection.database.lockedRun(\n            () => writeSingleLocal(\n                collection.localDocumentsStore,\n                {\n                    previous: localDoc,\n                    document: newDoc\n                }\n            )\n        );\n    }\n}\n"],"file":"crawling-checkpoint.js"}