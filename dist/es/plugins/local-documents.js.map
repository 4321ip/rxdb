{"version":3,"sources":["../../../src/plugins/local-documents.ts"],"names":["objectPath","createRxDocumentConstructor","basePrototype","createDocCache","newRxError","newRxTypeError","flatClone","getFromObjectOrThrow","isRxDatabase","isRxCollection","filter","map","distinctUntilChanged","startWith","mergeMap","findLocalDocument","writeSingleLocal","overwritable","DOC_CACHE_BY_PARENT","WeakMap","_getDocCache","parent","has","set","get","CHANGE_SUB_BY_PARENT","_getChangeSub","sub","$","pipe","cE","isLocal","subscribe","docCache","doc","documentId","_handleChangeEvent","_subs","push","RxDocumentParent","RxLocalDocument","id","jsonData","_getKeyObjectStorageInstanceByParent","localDocumentsStore","RxLocalDocumentPrototype","changeEvent","primary","operation","newData","documentData","_dataSync$","next","_isDeleted$","allAttachments$","document","primaryPath","asObservable","$emit","objPath","_data","undefined","valueObj","deepFreezeWhenDevMode","get$","path","includes","data","value","_rev","Object","is","_saveData","oldData","getValue","storageInstance","_id","bulkWrite","previous","then","res","docResult","success","error","remove","writeData","_deleted","_attachments","INIT_DONE","_init","docBaseProto","props","getOwnPropertyNames","forEach","key","exists","getOwnPropertyDescriptor","desc","defineProperty","getThrowingFun","k","functionName","create","newDoc","__proto__","insertLocal","docData","_isInMemory","parentCollection","getLocal","existing","upsertLocal","_parentCollection","docPromise","atomicUpdate","found","Promise","resolve","getLocal$","changeEventOrDoc","use","filterFlagged","RxDBLocalDocumentsPlugin","name","rxdb","prototypes","RxCollection","proto","RxDatabase"],"mappings":"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","sourcesContent":["import objectPath from 'object-path';\n\nimport {\n    createRxDocumentConstructor,\n    basePrototype\n} from '../rx-document';\nimport {\n    createDocCache\n} from '../doc-cache';\nimport {\n    newRxError,\n    newRxTypeError\n} from '../rx-error';\nimport {\n    flatClone,\n    getFromMapOrThrow,\n    getFromObjectOrThrow\n} from '../util';\n\nimport type {\n    RxChangeEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentWriteData,\n    RxLocalDocumentData,\n    RxPlugin,\n    RxStorageKeyObjectInstance\n} from '../types';\n\nimport {\n    isRxDatabase\n} from '../rx-database';\nimport {\n    isRxCollection\n} from '../rx-collection';\n\nimport {\n    filter,\n    map,\n    distinctUntilChanged,\n    startWith,\n    mergeMap\n} from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport {\n    findLocalDocument,\n    writeSingleLocal\n} from '../rx-storage-helper';\n\nimport {\n    overwritable\n} from '../overwritable';\n\nconst DOC_CACHE_BY_PARENT = new WeakMap();\nconst _getDocCache = (parent: any) => {\n    if (!DOC_CACHE_BY_PARENT.has(parent)) {\n        DOC_CACHE_BY_PARENT.set(\n            parent,\n            createDocCache()\n        );\n    }\n    return DOC_CACHE_BY_PARENT.get(parent);\n};\nconst CHANGE_SUB_BY_PARENT = new WeakMap();\nconst _getChangeSub = (parent: any) => {\n    if (!CHANGE_SUB_BY_PARENT.has(parent)) {\n        const sub = parent.$\n            .pipe(\n                filter(cE => (cE as RxChangeEvent<any>).isLocal)\n            )\n            .subscribe((cE: RxChangeEvent<any>) => {\n                const docCache = _getDocCache(parent);\n                const doc = docCache.get(cE.documentId);\n\n                if (doc) {\n                    doc._handleChangeEvent(cE);\n                }\n            });\n        parent._subs.push(sub);\n        CHANGE_SUB_BY_PARENT.set(\n            parent,\n            sub\n        );\n    }\n    return CHANGE_SUB_BY_PARENT.get(parent);\n};\n\nconst RxDocumentParent = createRxDocumentConstructor() as any;\nexport class RxLocalDocument extends RxDocumentParent {\n    constructor(\n        public readonly id: string,\n        jsonData: any,\n        public readonly parent: RxCollection | RxDatabase\n    ) {\n        super(null, jsonData);\n    }\n}\n\nfunction _getKeyObjectStorageInstanceByParent(parent: any): RxStorageKeyObjectInstance<any, any> {\n    if (isRxDatabase(parent)) {\n        return (parent as RxDatabase<{}>).localDocumentsStore; // database\n    } else {\n        return (parent as RxCollection).localDocumentsStore; // collection\n    }\n}\n\nconst RxLocalDocumentPrototype: any = {\n    get isLocal() {\n        return true;\n    },\n\n    //\n    // overwrites\n    //\n\n    _handleChangeEvent(\n        this: any,\n        changeEvent: RxChangeEvent\n    ) {\n        if (changeEvent.documentId !== this.primary) {\n            return;\n        }\n        switch (changeEvent.operation) {\n            case 'UPDATE':\n                const newData = changeEvent.documentData;\n                this._dataSync$.next(newData);\n                break;\n            case 'DELETE':\n                // remove from docCache to assure new upserted RxDocuments will be a new instance\n                const docCache = _getDocCache(this.parent);\n                docCache.delete(this.primary);\n                this._isDeleted$.next(true);\n                break;\n        }\n    },\n\n    get allAttachments$() {\n        // this is overwritten here because we cannot re-set getters on the prototype\n        throw newRxError('LD1', {\n            document: this\n        });\n    },\n    get primaryPath() {\n        return 'id';\n    },\n    get primary() {\n        return this.id;\n    },\n    get $() {\n        return (this as RxDocument)._dataSync$.asObservable();\n    },\n    $emit(this: any, changeEvent: RxChangeEvent) {\n        return this.parent.$emit(changeEvent);\n    },\n    get(this: RxDocument, objPath: string) {\n        if (!this._data) {\n            return undefined;\n        }\n        if (typeof objPath !== 'string') {\n            throw newRxTypeError('LD2', {\n                objPath\n            });\n        }\n\n        let valueObj = objectPath.get(this._data, objPath);\n        valueObj = overwritable.deepFreezeWhenDevMode(valueObj);\n        return valueObj;\n    },\n    get$(this: RxDocument, path: string) {\n        if (path.includes('.item.')) {\n            throw newRxError('LD3', {\n                path\n            });\n        }\n        if (path === this.primaryPath)\n            throw newRxError('LD4');\n\n        return this._dataSync$\n            .pipe(\n                map(data => objectPath.get(data, path)),\n                distinctUntilChanged()\n            );\n    },\n    set(this: RxDocument, objPath: string, value: any) {\n        if (!value) {\n            // object path not set, overwrite whole data\n            const data: any = flatClone(objPath);\n            data._rev = this._data._rev;\n            this._data = data;\n            return this;\n        }\n        if (objPath === '_id') {\n            throw newRxError('LD5', {\n                objPath,\n                value\n            });\n        }\n        if (Object.is(this.get(objPath), value)) {\n            return;\n        }\n        objectPath.set(this._data, objPath, value);\n        return this;\n    },\n    _saveData(this: RxLocalDocument, newData: RxLocalDocumentData) {\n        const oldData = this._dataSync$.getValue();\n        const storageInstance = _getKeyObjectStorageInstanceByParent(this.parent);\n        newData._id = this.id;\n\n        return storageInstance.bulkWrite([{\n            previous: oldData,\n            document: newData\n        }])\n            .then((res) => {\n                const docResult = res.success[newData._id];\n                if (!docResult) {\n                    throw getFromObjectOrThrow(res.error, newData._id);\n                }\n                newData._rev = docResult._rev;\n            });\n    },\n\n    remove(this: any): Promise<void> {\n        const storageInstance = _getKeyObjectStorageInstanceByParent(this.parent);\n        const writeData: RxDocumentWriteData<{ _id: string }> = {\n            _id: this.id,\n            _deleted: true,\n            _attachments: {}\n        };\n        return writeSingleLocal(storageInstance, {\n            previous: this._data,\n            document: writeData\n        })\n            .then(() => {\n                _getDocCache(this.parent).delete(this.id);\n            });\n    }\n};\n\n\nlet INIT_DONE = false;\nconst _init = () => {\n    if (INIT_DONE) return;\n    else INIT_DONE = true;\n\n    // add functions of RxDocument\n    const docBaseProto = basePrototype;\n    const props = Object.getOwnPropertyNames(docBaseProto);\n    props.forEach(key => {\n        const exists = Object.getOwnPropertyDescriptor(RxLocalDocumentPrototype, key);\n        if (exists) return;\n        const desc: any = Object.getOwnPropertyDescriptor(docBaseProto, key);\n        Object.defineProperty(RxLocalDocumentPrototype, key, desc);\n    });\n\n\n    /**\n     * overwrite things that not work on local documents\n     * with throwing function\n     */\n    const getThrowingFun = (k: string) => () => {\n        throw newRxError('LD6', {\n            functionName: k\n        });\n    };\n    [\n        'populate',\n        'update',\n        'putAttachment',\n        'getAttachment',\n        'allAttachments'\n    ].forEach((k: string) => RxLocalDocumentPrototype[k] = getThrowingFun(k));\n};\n\nRxLocalDocument.create = (id: string, data: any, parent: any) => {\n    _init();\n    _getChangeSub(parent);\n\n    const newDoc = new RxLocalDocument(id, data, parent);\n    newDoc.__proto__ = RxLocalDocumentPrototype;\n    _getDocCache(parent).set(id, newDoc);\n    return newDoc;\n};\n\n/**\n * save the local-document-data\n * throws if already exists\n */\nfunction insertLocal(\n    this: RxDatabase | RxCollection,\n    id: string,\n    docData: any\n): Promise<RxLocalDocument> {\n    if (isRxCollection(this) && this._isInMemory) {\n        return (this as any).parentCollection.insertLocal(id, docData);\n    }\n\n    return (this as any).getLocal(id)\n        .then((existing: any) => {\n\n            if (existing) {\n                throw newRxError('LD7', {\n                    id,\n                    data: docData\n                });\n            }\n\n            // create new one\n            docData = flatClone(docData);\n            docData._id = id;\n\n            return writeSingleLocal(\n                _getKeyObjectStorageInstanceByParent(this),\n                {\n                    document: docData\n                }\n            ).then(res => {\n                docData._rev = res._rev;\n                const newDoc = RxLocalDocument.create(id, docData, this);\n                return newDoc;\n            });\n        });\n}\n\n/**\n * save the local-document-data\n * overwrites existing if exists\n */\nfunction upsertLocal(this: any, id: string, data: any): Promise<RxLocalDocument> {\n    if (isRxCollection(this) && this._isInMemory) {\n        return this._parentCollection.upsertLocal(id, data);\n    }\n\n    return this.getLocal(id)\n        .then((existing: RxDocument) => {\n            if (!existing) {\n                // create new one\n                const docPromise = this.insertLocal(id, data);\n                return docPromise;\n            } else {\n                // update existing\n                data._rev = existing._data._rev;\n                return existing.atomicUpdate(() => data).then(() => existing);\n            }\n        });\n}\n\nfunction getLocal(this: any, id: string): Promise<RxLocalDocument | null> {\n    if (isRxCollection(this) && this._isInMemory) {\n        return this.parentCollection.getLocal(id);\n    }\n\n    const storageInstance = _getKeyObjectStorageInstanceByParent(this);\n    const docCache = _getDocCache(this);\n\n    // check in doc-cache\n    const found = docCache.get(id);\n    if (found) {\n        return Promise.resolve(found);\n    }\n\n    // if not found, check in storage instance\n    return findLocalDocument(storageInstance, id)\n        .then((docData) => {\n            if (!docData) {\n                return null;\n            }\n            const doc = RxLocalDocument.create(id, docData, this);\n            return doc;\n        })\n        .catch(() => null);\n}\n\nfunction getLocal$(this: RxCollection, id: string): Observable<RxLocalDocument | null> {\n    return this.$.pipe(\n        startWith(null),\n        mergeMap(async (cE: RxChangeEvent | null) => {\n            if (cE) {\n                return {\n                    changeEvent: cE\n                };\n            } else {\n                const doc = await this.getLocal(id);\n                return {\n                    doc: doc\n                };\n            }\n        }),\n        mergeMap(async (changeEventOrDoc) => {\n            if (changeEventOrDoc.changeEvent) {\n                const cE = changeEventOrDoc.changeEvent;\n                if (!cE.isLocal || cE.documentId !== id) {\n                    return {\n                        use: false\n                    };\n                } else {\n                    const doc = await this.getLocal(id);\n                    return {\n                        use: true,\n                        doc: doc\n                    };\n                }\n            } else {\n                return {\n                    use: true,\n                    doc: changeEventOrDoc.doc\n                };\n            }\n        }),\n        filter(filterFlagged => filterFlagged.use),\n        map(filterFlagged => {\n            return filterFlagged.doc;\n        })\n    );\n}\n\nexport const RxDBLocalDocumentsPlugin: RxPlugin = {\n    name: 'local-documents',\n    rxdb: true,\n    prototypes: {\n        RxCollection: (proto: any) => {\n            proto.insertLocal = insertLocal;\n            proto.upsertLocal = upsertLocal;\n            proto.getLocal = getLocal;\n            proto.getLocal$ = getLocal$;\n        },\n        RxDatabase: (proto: any) => {\n            proto.insertLocal = insertLocal;\n            proto.upsertLocal = upsertLocal;\n            proto.getLocal = getLocal;\n            proto.getLocal$ = getLocal$;\n        }\n    },\n    overwritable: {}\n};\n"],"file":"local-documents.js"}