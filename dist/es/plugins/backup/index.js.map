{"version":3,"sources":["../../../../src/plugins/backup/index.ts"],"names":["path","BehaviorSubject","firstValueFrom","Subject","filter","map","newRxError","getFromMapOrThrow","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_TRUE","PROMISE_RESOLVE_VOID","clearFolder","deleteFolder","documentFolder","ensureFolderExists","getMeta","prepareFolders","setMeta","writeJsonToFile","writeToFile","pact","state","value","s","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","callback","e","_this","thenable","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","backupSingleDocument","rxDocument","options","data","toJSON","writtenFiles","docFolder","primary","fileLocation","join","push","attachments","attachmentsFolder","allAttachments","Promise","all","attachment","getData","content","attachmentFileLocation","id","BACKUP_STATES_BY_DB","WeakMap","addToBackupStates","db","has","set","ar","RxBackupState","database","isStopped","subs","persistRunning","initialReplicationDone$","internalWriteEvents$","writeEvents$","asObservable","batchSize","persistOnce","_persistOnce","meta","Object","keys","collections","collectionName","processedDocuments","Set","collection","requestIdlePromise","collectionStates","lastSequence","hasMore","storageInstance","getChangedDocuments","sinceSequence","limit","direction","changesResult","docIds","changedDocuments","changedDocument","add","r","elem","pos","arr","indexOf","findByIds","docs","size","Array","from","values","doc","next","name","documentId","files","deleted","docId","getValue","watchForChanges","forEach","changes$","changeStream","sub","subscribe","awaitInitialBackup","pipe","cancel","unsubscribe","backup","backupState","live","RxDBBackupPlugin","rxdb","prototypes","RxDatabase","proto","hooks","preDestroyRxDatabase","states","get"],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    Subject,\n    Subscription\n} from 'rxjs';\nimport {\n    filter,\n    map\n} from 'rxjs/operators';\nimport { newRxError } from '../../rx-error';\nimport type {\n    BackupOptions,\n    RxBackupWriteEvent,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxPlugin\n} from '../../types';\nimport { getFromMapOrThrow, PROMISE_RESOLVE_FALSE, PROMISE_RESOLVE_TRUE, PROMISE_RESOLVE_VOID } from '../../util';\nimport {\n    clearFolder,\n    deleteFolder,\n    documentFolder,\n    ensureFolderExists,\n    getMeta,\n    prepareFolders,\n    setMeta,\n    writeJsonToFile,\n    writeToFile\n} from './file-util';\n\n\n/**\n * Backups a single documents,\n * returns the paths to all written files\n */\nexport async function backupSingleDocument(\n    rxDocument: RxDocument<any, any>,\n    options: BackupOptions\n): Promise<string[]> {\n    const data = rxDocument.toJSON(true);\n    const writtenFiles: string[] = [];\n\n    const docFolder = documentFolder(options, rxDocument.primary);\n    await clearFolder(docFolder);\n\n    const fileLocation = path.join(\n        docFolder,\n        'document.json'\n    );\n    await writeJsonToFile(fileLocation, data);\n    writtenFiles.push(fileLocation);\n\n    if (options.attachments) {\n        const attachmentsFolder = path.join(\n            docFolder,\n            'attachments'\n        );\n        ensureFolderExists(attachmentsFolder);\n        const attachments = (rxDocument as RxDocument).allAttachments();\n        await Promise.all(\n            attachments\n                .map(async (attachment) => {\n                    const content = await attachment.getData();\n                    const attachmentFileLocation = path.join(\n                        attachmentsFolder,\n                        attachment.id\n                    );\n                    await writeToFile(attachmentFileLocation, content as Buffer);\n                    writtenFiles.push(attachmentFileLocation);\n                })\n        );\n    }\n\n    return writtenFiles;\n}\n\nconst BACKUP_STATES_BY_DB: WeakMap<RxDatabase, RxBackupState[]> = new WeakMap();\nfunction addToBackupStates(db: RxDatabase, state: RxBackupState) {\n    if (!BACKUP_STATES_BY_DB.has(db)) {\n        BACKUP_STATES_BY_DB.set(db, []);\n    }\n    const ar = getFromMapOrThrow(BACKUP_STATES_BY_DB, db);\n    if (!ar) {\n        throw newRxError('SNH');\n    }\n    ar.push(state);\n}\n\nexport class RxBackupState {\n    public isStopped: boolean = false;\n    private subs: Subscription[] = [];\n    private persistRunning: Promise<void> = PROMISE_RESOLVE_VOID;\n    private initialReplicationDone$: BehaviorSubject<boolean> = new BehaviorSubject(false as any);\n\n    private readonly internalWriteEvents$: Subject<RxBackupWriteEvent> = new Subject();\n    public readonly writeEvents$: Observable<RxBackupWriteEvent> = this.internalWriteEvents$.asObservable();\n\n    constructor(\n        public readonly database: RxDatabase,\n        public readonly options: BackupOptions\n    ) {\n        if (!this.options.batchSize) {\n            this.options.batchSize = 10;\n        }\n        addToBackupStates(database, this);\n        prepareFolders(database, options);\n    }\n\n    /**\n     * Persists all data from all collections,\n     * beginning from the oldest sequence checkpoint\n     * to the newest one.\n     * Do not call this while it is already running.\n     * Returns true if there are more documents to process\n     */\n    public async persistOnce() {\n        return this.persistRunning = this.persistRunning.then(() => this._persistOnce());\n    }\n\n    public async _persistOnce() {\n        const meta = await getMeta(this.options);\n\n        await Promise.all(\n            Object\n                .keys(this.database.collections)\n                .map(async (collectionName) => {\n                    const processedDocuments: Set<string> = new Set();\n                    const collection: RxCollection = this.database.collections[collectionName];\n\n                    await this.database.requestIdlePromise();\n\n                    if (!meta.collectionStates[collectionName]) {\n                        meta.collectionStates[collectionName] = {\n                            lastSequence: 0\n                        };\n                    }\n                    let lastSequence = meta.collectionStates[collectionName].lastSequence;\n\n                    let hasMore = true;\n                    while (hasMore && !this.isStopped) {\n                        await this.database.requestIdlePromise();\n\n                        const changesResult = await collection.storageInstance.getChangedDocuments({\n                            sinceSequence: lastSequence,\n                            limit: this.options.batchSize,\n                            direction: 'after'\n                        });\n                        lastSequence = changesResult.lastSequence;\n\n                        meta.collectionStates[collectionName].lastSequence = lastSequence;\n\n                        const docIds: string[] = changesResult.changedDocuments\n                            .filter(changedDocument => {\n                                if (\n                                    processedDocuments.has(changedDocument.id)\n                                ) {\n                                    return false;\n                                } else {\n                                    processedDocuments.add(changedDocument.id);\n                                    return true;\n                                }\n                            })\n                            .map(r => r.id)\n                            // unique\n                            .filter((elem, pos, arr) => arr.indexOf(elem) === pos);\n                        await this.database.requestIdlePromise();\n\n                        const docs: Map<string, RxDocument> = await collection.findByIds(docIds);\n                        if (docs.size === 0) {\n                            hasMore = false;\n                            continue;\n                        }\n                        await Promise.all(\n                            Array\n                                .from(docs.values())\n                                .map(async (doc) => {\n                                    const writtenFiles = await backupSingleDocument(doc, this.options);\n                                    this.internalWriteEvents$.next({\n                                        collectionName: collection.name,\n                                        documentId: doc.primary,\n                                        files: writtenFiles,\n                                        deleted: false\n                                    });\n                                })\n                        );\n                        // handle deleted documents\n                        await Promise.all(\n                            docIds\n                                .filter(docId => !docs.has(docId))\n                                .map(async (docId) => {\n                                    await deleteFolder(documentFolder(this.options, docId));\n                                    this.internalWriteEvents$.next({\n                                        collectionName: collection.name,\n                                        documentId: docId,\n                                        files: [],\n                                        deleted: true\n                                    });\n                                })\n                        );\n\n                    }\n\n                    meta.collectionStates[collectionName].lastSequence = lastSequence;\n                    await setMeta(this.options, meta);\n                })\n        );\n\n        if (!this.initialReplicationDone$.getValue()) {\n            this.initialReplicationDone$.next(true);\n        }\n    }\n\n    public watchForChanges() {\n        const collections: RxCollection[] = Object.values(this.database.collections);\n        collections.forEach(collection => {\n            const changes$ = collection.storageInstance.changeStream();\n            const sub = changes$.subscribe(() => {\n                this.persistOnce();\n            });\n            this.subs.push(sub);\n        });\n    }\n\n    /**\n     * Returns a promise that resolves when the initial backup is done\n     * and the filesystem is in sync with the database state\n     */\n    public awaitInitialBackup(): Promise<boolean> {\n        return firstValueFrom(\n            this.initialReplicationDone$.pipe(\n                filter(v => !!v),\n                map(() => true)\n            )\n        );\n    }\n\n    cancel(): Promise<boolean> {\n        if (this.isStopped) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        this.isStopped = true;\n        this.subs.forEach(sub => sub.unsubscribe());\n        return PROMISE_RESOLVE_TRUE;\n    }\n}\n\n\nexport function backup(\n    this: RxDatabase,\n    options: BackupOptions\n): RxBackupState {\n    const backupState = new RxBackupState(this, options);\n    backupState.persistOnce();\n\n    if (options.live) {\n        backupState.watchForChanges();\n    }\n\n    return backupState;\n}\n\nexport * from './file-util';\nexport const RxDBBackupPlugin: RxPlugin = {\n    name: 'backup',\n    rxdb: true,\n    prototypes: {\n        RxDatabase(proto: any) {\n            proto.backup = backup;\n        }\n    },\n    hooks: {\n        preDestroyRxDatabase(db: RxDatabase) {\n            const states = BACKUP_STATES_BY_DB.get(db);\n            if (states) {\n                states.forEach(state => state.cancel());\n            }\n        }\n    }\n};\n"],"file":"index.js"}