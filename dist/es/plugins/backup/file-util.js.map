{"version":3,"sources":["../../../../src/plugins/backup/file-util.ts"],"names":["fs","path","now","setMeta","options","meta","loc","metaFileLocation","writeJsonToFile","getMeta","Promise","res","rej","readFile","err","data","metaContent","JSON","parse","location","writeToFile","stringify","writeFile","ensureFolderExists","folderPath","existsSync","mkdirSync","recursive","clearFolder","deleteFolder","rmdirSync","prepareFolders","database","directory","metaLoc","currentTime","metaData","createdAt","updatedAt","collectionStates","writeFileSync","Object","keys","collections","forEach","collectionName","join","documentFolder","docId"],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport {\n    BackupMetaFileContent,\n    BackupOptions,\n    RxDatabase\n} from '../../types';\nimport { now } from '../../util';\n\n/**\n * ensure that the given folder exists\n */\nexport function ensureFolderExists(folderPath: string): void {\n    if (!fs.existsSync(folderPath)) {\n        fs.mkdirSync(folderPath, { recursive: true });\n    }\n}\n\n/**\n * deletes and recreates the folder\n */\nexport function clearFolder(folderPath: string): void {\n    deleteFolder(folderPath);\n    ensureFolderExists(folderPath);\n}\n\nexport function deleteFolder(folderPath: string): void {\n    // only remove if exists to not raise warning\n    if (fs.existsSync(folderPath)) {\n        fs.rmdirSync(folderPath, { recursive: true });\n    }\n}\n\nexport function prepareFolders(\n    database: RxDatabase,\n    options: BackupOptions\n) {\n    ensureFolderExists(options.directory);\n\n    const metaLoc = metaFileLocation(options);\n\n    if (!fs.existsSync(metaLoc)) {\n        const currentTime = now();\n        const metaData: BackupMetaFileContent = {\n            createdAt: currentTime,\n            updatedAt: currentTime,\n            collectionStates: {}\n        };\n        fs.writeFileSync(metaLoc, JSON.stringify(metaData), 'utf-8');\n    }\n\n    Object.keys(database.collections).forEach(collectionName => {\n        ensureFolderExists(\n            path.join(\n                options.directory,\n                collectionName\n            )\n        );\n    });\n}\n\nexport async function writeToFile(\n    location: string,\n    data: string | Buffer\n): Promise<void> {\n    return new Promise(function (res, rej) {\n        fs.writeFile(\n            location,\n            data,\n            'utf-8',\n            (err) => {\n                if (err) {\n                    rej(err);\n                } else {\n                    res();\n                }\n            }\n        );\n    });\n}\n\nexport async function writeJsonToFile(\n    location: string,\n    data: any\n): Promise<void> {\n    return writeToFile(\n        location,\n        JSON.stringify(data)\n    );\n}\n\nexport function metaFileLocation(options: BackupOptions): string {\n    return path.join(\n        options.directory,\n        'backup_meta.json'\n    );\n}\n\nexport async function getMeta(options: BackupOptions): Promise<BackupMetaFileContent> {\n    const loc = metaFileLocation(options);\n    return new Promise((res, rej) => {\n        fs.readFile(loc, 'utf-8', (err, data) => {\n            if (err) {\n                rej(err);\n            } else {\n                const metaContent = JSON.parse(data);\n                res(metaContent);\n            }\n        });\n    });\n}\n\nexport async function setMeta(\n    options: BackupOptions,\n    meta: BackupMetaFileContent\n): Promise<void> {\n    const loc = metaFileLocation(options);\n    return writeJsonToFile(loc, meta);\n}\n\nexport function documentFolder(\n    options: BackupOptions,\n    docId: string\n): string {\n    return path.join(\n        options.directory,\n        docId\n    );\n}\n"],"file":"file-util.js"}