{"version":3,"sources":["../../../src/plugins/in-memory.ts"],"names":["Subject","fromEvent","ObservableFromEvent","firstValueFrom","filter","map","mergeMap","delay","RxCollectionBase","clone","PROMISE_RESOLVE_VOID","randomCouchString","PouchDB","getRxStoragePouch","pouchSwapIdToPrimary","pouchSwapPrimaryToId","createCrypter","createChangeEventBuffer","createRxSchema","newRxError","getDocumentDataOfRxChangeEvent","_handleFromStorageInstance","_handleToStorageInstance","prepareInMemoryRxCollection","instance","memoryStorage","createStorageInstance","databaseName","collectionName","schema","jsonSchema","options","pouchSettings","multiInstance","storageInstance","pouch","internals","inMemory","INIT_DONE","adapters","memory","collectionCacheMap","has","collectionPromiseCacheMap","get","then","col","InMemoryRxCollection","preparePromise","prepareChild","set","WeakMap","BULK_DOC_OPTIONS","new_edits","BULK_DOC_OPTIONS_FALSE","parentCollection","database","name","toCleanSchema","_methods","_eventCounter","_isInMemory","onDestroy","destroy","_crypter","password","_changeStreams","forEach","stream","cancel","Object","entries","statics","funName","fun","defineProperty","bind","_observable$","_changeEventBuffer","parentProto","getPrototypeOf","_oldPouchPut","_pouchPut","_nonPersistentRevisions","Set","_nonPersistentRevisionsSubject","setIndexes","_subs","push","subscribe","cE","doc","_docCache","documentId","_handleChangeEvent","replicateExistingDocuments","thisToParentSub","streamChangedDocuments","pipe","applyChangedDocumentToPouch","changeRev","next","size","parentToThisSub","awaitPersistence","obj","overwrite","ret","add","rev","$emit","changeEvent","hasChangeWithRevision","_rev","compact","syncCouchDB","rxSchema","newSchemaJson","keyCompression","properties","_attachments","removeEncryption","complete","encrypted","values","val","fromCollection","toCollection","allDocs","attachments","include_docs","allRows","docs","rows","row","language","primaryKey","primaryPath","length","Promise","resolve","bulkDocs","all","indexes","indexAr","indexName","join","createIndex","ddoc","index","fields","rxCollection","prevFilter","_i","_doNotEmitSet","observable","changes","since","live","changeAr","change","emitFlag","id","d","docData","transformedDoc","_id","oldDoc","bulkRet","ok","Error","JSON","stringify","setTimeout","rxdb","prototypes","RxCollection","proto","RxDBInMemoryPlugin"],"mappings":"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","sourcesContent":["/**\n * This plugin adds RxCollection.inMemory()\n * Which replicates the collection into an in-memory-collection\n * So you can do faster queries and also query over encrypted fields.\n * Writes will still run on the original collection\n */\n\nimport {\n    Subject,\n    fromEvent as ObservableFromEvent,\n    Observable,\n    firstValueFrom\n} from 'rxjs';\n\nimport {\n    filter,\n    map,\n    mergeMap,\n    delay\n} from 'rxjs/operators';\n\nimport type {\n    RxCollection,\n    RxCouchDBReplicationState,\n    PouchDBInstance,\n    RxPlugin,\n    PouchBulkDocResultRow,\n    RxChangeEvent\n} from '../types';\nimport {\n    RxCollectionBase\n} from '../rx-collection';\nimport {\n    clone,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from '../util';\nimport {\n    PouchDB,\n    getRxStoragePouch,\n    pouchSwapIdToPrimary,\n    pouchSwapPrimaryToId,\n} from '../plugins/pouchdb';\nimport {\n    createCrypter\n} from '../crypter';\nimport {\n    createChangeEventBuffer\n} from '../change-event-buffer';\nimport {\n    createRxSchema,\n    RxSchema\n} from '../rx-schema';\nimport {\n    newRxError\n} from '../rx-error';\nimport { getDocumentDataOfRxChangeEvent } from '../rx-change-event';\nimport { _handleFromStorageInstance, _handleToStorageInstance } from '../rx-collection-helper';\n\nconst collectionCacheMap = new WeakMap();\nconst collectionPromiseCacheMap = new WeakMap();\nconst BULK_DOC_OPTIONS = {\n    new_edits: true\n};\nconst BULK_DOC_OPTIONS_FALSE = {\n    new_edits: false\n};\n\nexport\n    class InMemoryRxCollection<RxDocumentType, OrmMethods>\n    extends RxCollectionBase<RxDocumentType, OrmMethods> {\n\n    constructor(\n        public readonly parentCollection: RxCollection<RxDocumentType, OrmMethods>,\n        public readonly pouchSettings?: any\n    ) {\n        super(\n            parentCollection.database as any,\n            parentCollection.name,\n            toCleanSchema(parentCollection.schema),\n            pouchSettings, // pouchSettings\n            {} as any,\n            (parentCollection as any)._methods);\n        this._isInMemory = true;\n\n        parentCollection.onDestroy.then(() => this.destroy());\n        this._crypter = createCrypter(this.database.password, this.schema);\n        this._changeStreams = [];\n\n        /**\n         * runs on parentCollection.destroy()\n         * Cleans up everything to free up memory\n         */\n        this.onDestroy.then(() => {\n            this._changeStreams.forEach((stream: any) => stream.cancel());\n            // delete all data\n            this.storageInstance.internals.pouch.destroy();\n        });\n\n        // add orm functions and options from parent\n        this.options = parentCollection.options;\n        Object\n            .entries(parentCollection.statics)\n            .forEach(([funName, fun]) => {\n                Object.defineProperty(this, funName, {\n                    get: () => (fun as any).bind(this)\n                });\n            });\n\n        this._observable$ = new Subject();\n        this._changeEventBuffer = createChangeEventBuffer(this as any);\n\n        const parentProto = Object.getPrototypeOf(parentCollection);\n        this._oldPouchPut = (parentProto as any)._pouchPut.bind(this);\n\n        this._nonPersistentRevisions = new Set();\n        this._nonPersistentRevisionsSubject = new Subject(); // emits Set.size() when Set is changed\n    }\n    public _changeStreams: any;\n    public _oldPouchPut: Function;\n    public _nonPersistentRevisions: any;\n    public _nonPersistentRevisionsSubject: any;\n\n\n    /**\n     * @overwrite\n     */\n    public _eventCounter: number = 0;\n\n    prepareChild() {\n        return setIndexes(this.schema, this.storageInstance.internals.pouch)\n            .then(() => {\n                this._subs.push(\n                    (this._observable$ as any).subscribe((cE: RxChangeEvent) => {\n                        // when data changes, send it to RxDocument in docCache\n                        const doc = this._docCache.get(cE.documentId);\n                        if (doc) doc._handleChangeEvent(cE);\n                    })\n                );\n            })\n            // initial sync parent's docs to own\n            .then(() => replicateExistingDocuments(this.parentCollection as any, this as any))\n            .then(() => {\n                /**\n                 * create an ongoing replications between both sides\n                 */\n                const thisToParentSub = streamChangedDocuments(this as any)\n                    .pipe(\n                        mergeMap(doc => applyChangedDocumentToPouch(this.parentCollection, doc)\n                            .then(() => doc['_rev'])\n                        )\n                    )\n                    .subscribe(changeRev => {\n                        this._nonPersistentRevisions.delete(changeRev);\n                        this._nonPersistentRevisionsSubject.next(this._nonPersistentRevisions.size);\n                    });\n                this._subs.push(thisToParentSub);\n\n                const parentToThisSub = streamChangedDocuments(this.parentCollection)\n                    .subscribe(doc => applyChangedDocumentToPouch(this as any, doc));\n                this._subs.push(parentToThisSub);\n            });\n    }\n\n    /**\n     * waits until all writes are persistent\n     * in the parent collection\n     */\n    awaitPersistence(): Promise<any> {\n        if (this._nonPersistentRevisions.size === 0) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        return firstValueFrom(\n            this._nonPersistentRevisionsSubject.pipe(\n                filter(() => this._nonPersistentRevisions.size === 0),\n            )\n        );\n    }\n\n    /**\n     * To know which events are replicated and which are not,\n     * the _pouchPut is wrapped\n     * @overwrite\n     */\n    _pouchPut(obj: any, overwrite: boolean) {\n        return this._oldPouchPut(obj, overwrite).then((ret: any) => {\n            this._nonPersistentRevisions.add(ret.rev);\n            return ret;\n        });\n    }\n    $emit(changeEvent: RxChangeEvent) {\n        const doc = getDocumentDataOfRxChangeEvent(changeEvent);\n        if ((this._changeEventBuffer as any).hasChangeWithRevision(doc && doc._rev)) {\n            return;\n        }\n\n        (this._observable$ as any).next(changeEvent);\n\n        // run compaction each 10 events\n        this._eventCounter++;\n        if (this._eventCounter === 10) {\n            this._eventCounter = 0;\n            this.storageInstance.internals.pouch.compact();\n        }\n    }\n\n    /**\n     * @overwrite\n     * Replication on the inMemory is dangerous,\n     * replicate with it's parent instead\n     */\n    syncCouchDB(): RxCouchDBReplicationState {\n        throw newRxError('IM2');\n    }\n}\n\n/**\n * returns a version of the schema that:\n * - disabled the keyCompression\n * - has no encryption\n * - has no attachments\n */\nfunction toCleanSchema(rxSchema: RxSchema): RxSchema {\n    const newSchemaJson = clone(rxSchema.jsonSchema);\n    newSchemaJson.keyCompression = false;\n    delete newSchemaJson.properties._rev;\n    delete newSchemaJson.properties._attachments;\n\n    const removeEncryption = (schema: any, complete: any) => {\n        delete schema.encrypted;\n        Object.values(schema)\n            .filter(val => typeof val === 'object')\n            .forEach(val => removeEncryption(val, complete));\n    };\n    removeEncryption(newSchemaJson, newSchemaJson);\n\n    return createRxSchema(newSchemaJson);\n}\n\n/**\n * replicates all documents from the parent to the inMemoryCollection\n * @return Promise that resolves with an array of the docs data\n */\nexport function replicateExistingDocuments(\n    fromCollection: RxCollection,\n    toCollection: RxCollection\n): Promise<any[]> {\n    const pouch: PouchDBInstance = fromCollection.storageInstance.internals.pouch;\n    return pouch.allDocs({\n        attachments: false,\n        include_docs: true\n    }).then(allRows => {\n        const docs = allRows\n            .rows\n            .map((row: any) => row.doc)\n            .filter((doc: any) => !doc.language) // do not replicate design-docs\n            .map((doc: any) => _handleFromStorageInstance(fromCollection, doc))\n            // swap back primary because keyCompression:false\n            .map((doc: any) => {\n                const primaryKey: string = fromCollection.schema.primaryPath as any;\n                return pouchSwapPrimaryToId(primaryKey, doc);\n            });\n\n        if (docs.length === 0) {\n            // nothing to replicate\n            return Promise.resolve([]);\n        }\n        else {\n            return toCollection.storageInstance.internals.pouch.bulkDocs({\n                docs\n            }, BULK_DOC_OPTIONS_FALSE)\n                .then(() => docs);\n        }\n    });\n}\n\n/**\n * sets the indexes from the schema at the pouchdb\n */\nexport function setIndexes(\n    schema: RxSchema,\n    pouch: PouchDBInstance,\n): Promise<any> {\n    return Promise.all(\n        schema.indexes\n            .map(indexAr => {\n                const indexName = 'idx-rxdb-' + indexAr.join(',');\n                return pouch.createIndex({\n                    ddoc: indexName,\n                    name: indexName,\n                    index: {\n                        fields: indexAr\n                    }\n                });\n            })\n    );\n}\n\n/**\n * returns an observable that streams all changes\n * as plain documents that have no encryption or keyCompression.\n * We use this to replicate changes from one collection to the other\n * @param prevFilter can be used to filter changes before doing anything\n * @return observable that emits document-data\n */\nexport function streamChangedDocuments(\n    rxCollection: RxCollection<any, any>,\n    prevFilter = (_i: any) => true\n): Observable<any> {\n    if (!(rxCollection as any)._doNotEmitSet) {\n        (rxCollection as any)._doNotEmitSet = new Set();\n    }\n\n    const observable = ObservableFromEvent(\n        rxCollection.storageInstance.internals.pouch\n            .changes({\n                since: 'now',\n                live: true,\n                include_docs: true\n            }),\n        'change'\n    )\n        .pipe(\n            /**\n             * we need this delay because with pouchdb 7.2.2\n             * it happened that _doNotEmitSet.add() from applyChangedDocumentToPouch()\n             * was called after the change was streamed downwards\n             * which then leads to a wrong detection\n             */\n            delay(0),\n            map((changeAr: any) => changeAr[0]), // rxjs emits an array for whatever reason\n            filter(change => {\n                // changes on the doNotEmit-list shell not be fired\n                const emitFlag = change.id + ':' + change.doc._rev;\n                if ((rxCollection as any)._doNotEmitSet.has(emitFlag)) {\n                    return false;\n                } else {\n                    return true;\n                }\n            }),\n            filter(change => prevFilter(change)),\n            map(change => _handleFromStorageInstance(rxCollection, change.doc)),\n            map(d => {\n                const primaryKey: string = rxCollection.schema.primaryPath as any;\n                return pouchSwapIdToPrimary(primaryKey, d);\n            })\n        );\n    return observable;\n}\n\n/**\n * writes the doc-data into the pouchdb of the collection\n * without changeing the revision\n */\nexport function applyChangedDocumentToPouch(\n    rxCollection: RxCollection<any, any>,\n    docData: any\n): Promise<any> {\n    if (!(rxCollection as any)._doNotEmitSet) {\n        (rxCollection as any)._doNotEmitSet = new Set();\n    }\n\n    const primaryKey: string = rxCollection.schema.primaryPath as any;\n\n    let transformedDoc = _handleToStorageInstance(rxCollection, docData);\n    transformedDoc = pouchSwapPrimaryToId(\n        primaryKey,\n        transformedDoc\n    );\n\n    return rxCollection.storageInstance.internals.pouch.get(transformedDoc._id)\n        .then((oldDoc: any) => transformedDoc._rev = oldDoc._rev)\n        .catch(() => {\n            // doc not found, do not use a revision\n            delete transformedDoc._rev;\n        }).then(() => rxCollection.storageInstance.internals.pouch.bulkDocs({\n            docs: [transformedDoc]\n        }, BULK_DOC_OPTIONS))\n        .then((bulkRet: any) => {\n            if (bulkRet.length > 0 && !(bulkRet[0] as PouchBulkDocResultRow).ok) {\n                throw new Error(JSON.stringify(bulkRet[0]));\n            }\n            // set the flag so this does not appear in the own event-stream again\n            const emitFlag = transformedDoc._id + ':' + (bulkRet[0] as PouchBulkDocResultRow).rev;\n            (rxCollection as any)._doNotEmitSet.add(emitFlag);\n\n            // remove from the list later to not have a memory-leak\n            setTimeout(() => (rxCollection as any)._doNotEmitSet.delete(emitFlag), 30 * 1000);\n\n            return transformedDoc;\n        });\n}\n\nlet INIT_DONE = false;\n/**\n * called in the proto of RxCollection\n */\nexport async function inMemory(\n    this: RxCollection\n): Promise<RxCollection> {\n    if (!INIT_DONE) {\n        INIT_DONE = true;\n        // ensure memory-adapter is added\n        if (!(PouchDB as any).adapters || !(PouchDB as any).adapters.memory) {\n            throw newRxError('IM1');\n        }\n    }\n\n    if (collectionCacheMap.has(this)) {\n        // already exists for this collection -> wait until synced\n        return collectionPromiseCacheMap.get(this)\n            .then(() => collectionCacheMap.get(this));\n    }\n\n    const col = new InMemoryRxCollection(this);\n    await prepareInMemoryRxCollection(col);\n\n    const preparePromise = col.prepareChild();\n    collectionCacheMap.set(this, col);\n    collectionPromiseCacheMap.set(this, preparePromise);\n\n    return preparePromise.then(() => col) as any;\n}\n\nexport async function prepareInMemoryRxCollection(instance: InMemoryRxCollection<any, {}>): Promise<void> {\n    const memoryStorage = getRxStoragePouch('memory', {});\n    instance.storageInstance = await memoryStorage.createStorageInstance({\n        databaseName: 'rxdb-in-memory',\n        collectionName: randomCouchString(10),\n        schema: instance.schema.jsonSchema,\n        options: instance.pouchSettings,\n        multiInstance: false\n    });\n    (instance as any).pouch = instance.storageInstance.internals.pouch;\n}\n\n\nexport const rxdb = true;\nexport const prototypes = {\n    RxCollection: (proto: any) => {\n        proto.inMemory = inMemory;\n    }\n};\n\nexport const RxDBInMemoryPlugin: RxPlugin = {\n    name: 'in-memory',\n    rxdb,\n    prototypes\n};\n"],"file":"in-memory.js"}