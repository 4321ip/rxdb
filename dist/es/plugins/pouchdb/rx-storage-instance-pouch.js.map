{"version":3,"sources":["../../../../src/plugins/pouchdb/rx-storage-instance-pouch.ts"],"names":["ObliviousSet","Subject","newRxError","getPrimaryFieldOfPrimaryKey","OPEN_POUCHDB_STORAGE_INSTANCES","POUCHDB_DESIGN_PREFIX","pouchDocumentDataToRxDocumentData","pouchSwapIdToPrimary","rxDocumentDataToPouchDocumentData","writeAttachmentsToAttachments","flatClone","getFromMapOrThrow","PROMISE_RESOLVE_VOID","getCustomEventEmitterByPouch","lastId","RxStorageInstancePouch","databaseName","collectionName","schema","internals","options","id","changes$","subs","add","primaryPath","primaryKey","emitter","pouch","emittedEventBulkIds","eventSub","subject","subscribe","ev","events","length","has","forEach","event","change","doc","previous","next","push","close","sub","unsubscribe","remove","destroy","bulkAddRevisions","documents","args","writeData","map","bulkDocs","new_edits","set_new_edit_as_latest_revision","bulkWrite","documentWrites","writeRowById","Map","insertDocs","primary","document","set","storeDocumentData","_rev","custom","pouchResult","ret","success","error","Promise","all","resultRow","writeRow","err","isError","status","documentId","pushObj","rev","_attachments","query","preparedQuery","find","findResult","docs","pouchDoc","useDoc","getAttachmentData","attachmentId","getAttachment","findDocumentsById","ids","deleted","allDocs","include_docs","keys","rows","filter","row","docData","changes","live","since","doc_ids","style","viaChanges","retDocs","results","result","get","firstDoc","useFirstDoc","changeStream","asObservable","getChangedDocuments","pouchChangesOpts","limit","sinceSequence","descending","direction","pouchResults","changedDocuments","startsWith","sequence","seq","lastSequence","last_seq"],"mappings":"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","sourcesContent":["import type {\n    ChangeEvent\n} from 'event-reduce-js';\nimport { ObliviousSet } from 'oblivious-set';\nimport {\n    Observable,\n    Subject,\n    Subscription,\n    tap\n} from 'rxjs';\nimport { newRxError } from '../../rx-error';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema';\nimport type {\n    BlobBuffer,\n    BulkWriteRow,\n    ChangeStreamOnceOptions,\n    EventBulk,\n    PouchBulkDocResultRow,\n    PouchChangesOptionsNonLive,\n    PouchSettings,\n    PouchWriteError,\n    PreparedQuery,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteError,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageQueryResult\n} from '../../types';\nimport {\n    getEventKey,\n    OPEN_POUCHDB_STORAGE_INSTANCES,\n    pouchChangeRowToChangeEvent,\n    POUCHDB_DESIGN_PREFIX,\n    POUCHDB_LOCAL_PREFIX,\n    pouchDocumentDataToRxDocumentData,\n    PouchStorageInternals,\n    pouchSwapIdToPrimary,\n    rxDocumentDataToPouchDocumentData,\n    writeAttachmentsToAttachments\n} from './pouchdb-helper';\nimport {\n    filterInMemoryFields,\n    massageSelector\n} from 'pouchdb-selector-core';\nimport {\n    flatClone,\n    getFromMapOrThrow,\n    getHeightOfRevision,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString\n} from '../../util';\nimport {\n    getCustomEventEmitterByPouch\n} from './custom-events-plugin';\n\n\nlet lastId = 0;\n\nexport class RxStorageInstancePouch<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    PouchStorageInternals,\n    PouchSettings\n> {\n    public readonly id: number = lastId++;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> = new Subject();\n    private subs: Subscription[] = [];\n    private primaryPath: keyof RxDocType;\n\n    constructor(\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\n        public readonly internals: Readonly<PouchStorageInternals>,\n        public readonly options: Readonly<PouchSettings>\n    ) {\n        OPEN_POUCHDB_STORAGE_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n\n        /**\n         * Instead of listening to pouch.changes,\n         * we have overwritten pouchdbs bulkDocs()\n         * and create our own event stream, this will work more relyable\n         * and does not mix up with write events from other sources.\n         */\n        const emitter = getCustomEventEmitterByPouch<RxDocType>(this.internals.pouch);\n\n        /**\n         * Contains all eventIds that of emitted events,\n         * used because multi-instance pouchdbs often will reemit the same\n         * event on the other browser tab so we have to de-duplicate them.\n         */\n        const emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n        const eventSub = emitter.subject.subscribe(async (ev) => {\n            if (\n                ev.events.length === 0 ||\n                emittedEventBulkIds.has(ev.id)\n            ) {\n                return;\n            }\n            emittedEventBulkIds.add(ev.id);\n\n            // rewrite primaryPath of all events\n            ev.events.forEach(event => {\n                if (event.change.doc) {\n                    event.change.doc = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.doc as any\n                    );\n                }\n                if (event.change.previous) {\n                    event.change.previous = pouchSwapIdToPrimary(\n                        this.primaryPath,\n                        event.change.previous as any\n                    );\n                }\n            });\n\n            this.changes$.next(ev);\n        });\n        this.subs.push(eventSub);\n    }\n\n    close() {\n        this.subs.forEach(sub => sub.unsubscribe());\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n\n        // TODO this did not work because a closed pouchdb cannot be recreated in the same process run\n        // await this.internals.pouch.close();\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    async remove() {\n        this.subs.forEach(sub => sub.unsubscribe());\n\n        OPEN_POUCHDB_STORAGE_INSTANCES.delete(this);\n        await this.internals.pouch.destroy();\n    }\n\n    public async bulkAddRevisions(\n        documents: RxDocumentData<RxDocType>[]\n    ): Promise<void> {\n        if (documents.length === 0) {\n            throw newRxError('P3', {\n                args: {\n                    documents\n                }\n            });\n        }\n\n        const writeData = documents.map(doc => {\n            return rxDocumentDataToPouchDocumentData(\n                this.primaryPath,\n                doc\n            );\n        });\n\n        // we do not need the response here because pouchdb returns an empty array on new_edits: false\n        await this.internals.pouch.bulkDocs(\n            writeData,\n            {\n                new_edits: false,\n                set_new_edit_as_latest_revision: true\n            }\n        );\n    }\n\n    public async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[]\n    ): Promise<\n        RxStorageBulkWriteResponse<RxDocType>\n    > {\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n\n        const writeRowById: Map<string, BulkWriteRow<RxDocType>> = new Map();\n        const insertDocs: (RxDocType & { _id: string; _rev: string })[] = documentWrites.map(writeData => {\n            const primary: string = (writeData.document as any)[this.primaryPath];\n            writeRowById.set(primary, writeData);\n\n            const storeDocumentData: any = rxDocumentDataToPouchDocumentData<RxDocType>(\n                this.primaryPath,\n                writeData.document\n            );\n\n            // if previous document exists, we have to send the previous revision to pouchdb.\n            if (writeData.previous) {\n                storeDocumentData._rev = writeData.previous._rev;\n            }\n\n            return storeDocumentData;\n        });\n\n        const pouchResult = await this.internals.pouch.bulkDocs(insertDocs, {\n            custom: {\n                primaryPath: this.primaryPath,\n                writeRowById\n            }\n        } as any);\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        };\n\n        await Promise.all(\n            pouchResult.map(async (resultRow) => {\n                const writeRow = getFromMapOrThrow(writeRowById, resultRow.id);\n                if ((resultRow as PouchWriteError).error) {\n                    const err: RxStorageBulkWriteError<RxDocType> = {\n                        isError: true,\n                        status: 409,\n                        documentId: resultRow.id,\n                        writeRow\n                    };\n                    ret.error[resultRow.id] = err;\n                } else {\n                    let pushObj: RxDocumentData<RxDocType> = flatClone(writeRow.document) as any;\n                    pushObj = pouchSwapIdToPrimary(this.primaryPath, pushObj);\n                    pushObj._rev = (resultRow as PouchBulkDocResultRow).rev;\n\n                    // replace the inserted attachments with their diggest\n                    pushObj._attachments = {};\n                    if (!writeRow.document._attachments) {\n                        writeRow.document._attachments = {};\n                    } else {\n                        pushObj._attachments = await writeAttachmentsToAttachments(writeRow.document._attachments);\n                    }\n                    ret.success[resultRow.id] = pushObj;\n                }\n            })\n        );\n\n        return ret;\n    }\n\n    public async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const findResult = await this.internals.pouch.find<RxDocType>(preparedQuery);\n        const ret: RxStorageQueryResult<RxDocType> = {\n            documents: findResult.docs.map(pouchDoc => {\n                const useDoc = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    pouchDoc\n                );\n                return useDoc;\n            })\n        };\n        return ret;\n    }\n\n    async getAttachmentData(\n        documentId: string,\n        attachmentId: string\n    ): Promise<BlobBuffer> {\n        const attachmentData = await this.internals.pouch.getAttachment(\n            documentId,\n            attachmentId\n        );\n        return attachmentData;\n    }\n\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\n        /**\n         * On deleted documents, pouchdb will only return the tombstone.\n         * So we have to get the properties directly for each document\n         * with the hack of getting the changes and then make one request per document\n         * with the latest revision.\n         * TODO create an issue at pouchdb on how to get the document data of deleted documents,\n         * when one past revision was written via new_edits=false\n         * @link https://stackoverflow.com/a/63516761/3443137\n         */\n        if (deleted) {\n            const viaChanges = await this.internals.pouch.changes({\n                live: false,\n                since: 0,\n                doc_ids: ids,\n                style: 'all_docs'\n            });\n\n            const retDocs: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n            await Promise.all(\n                viaChanges.results.map(async (result) => {\n                    const firstDoc = await this.internals.pouch.get(\n                        result.id,\n                        {\n                            rev: result.changes[0].rev,\n                            deleted: 'ok',\n                            style: 'all_docs'\n                        }\n                    );\n                    const useFirstDoc = pouchDocumentDataToRxDocumentData(\n                        this.primaryPath,\n                        firstDoc\n                    );\n                    retDocs[result.id] = useFirstDoc;\n                })\n            );\n            return retDocs;\n        }\n\n\n        const pouchResult = await this.internals.pouch.allDocs({\n            include_docs: true,\n            keys: ids\n        });\n\n        const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\n        pouchResult.rows\n            .filter(row => !!row.doc)\n            .forEach(row => {\n                let docData = row.doc;\n                docData = pouchDocumentDataToRxDocumentData(\n                    this.primaryPath,\n                    docData\n                );\n                ret[row.id] = docData;\n            });\n\n        return ret;\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>> {\n        return this.changes$.asObservable();\n    }\n\n    async getChangedDocuments(\n        options: ChangeStreamOnceOptions\n    ): Promise<{\n        changedDocuments: {\n            id: string;\n            sequence: number;\n        }[];\n        lastSequence: number;\n    }> {\n        const pouchChangesOpts: PouchChangesOptionsNonLive = {\n            live: false,\n            limit: options.limit,\n            include_docs: false,\n            since: options.sinceSequence,\n            descending: options.direction === 'before' ? true : false\n        };\n        const pouchResults = await this.internals.pouch.changes(pouchChangesOpts);\n\n        /**\n         * TODO stripping the internal docs\n         * results in having a non-full result set that maybe no longer\n         * reaches the options.limit. We should fill up again\n         * to ensure pagination works correctly.\n         */\n        const changedDocuments = pouchResults.results\n            .filter(row => !row.id.startsWith(POUCHDB_DESIGN_PREFIX))\n            .map(row => ({\n                id: row.id,\n                sequence: row.seq\n            }));\n        const lastSequence = pouchResults.last_seq;\n        return {\n            changedDocuments,\n            lastSequence\n        };\n    }\n}\n"],"file":"rx-storage-instance-pouch.js"}