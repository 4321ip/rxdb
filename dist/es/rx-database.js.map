{"version":3,"sources":["../../src/rx-database.ts"],"names":["IdleQueue","BroadcastChannel","pluginMissing","flatClone","PROMISE_RESOLVE_FALSE","randomCouchString","ensureNotFalsy","PROMISE_RESOLVE_VOID","newRxError","createRxSchema","getPrimaryFieldOfPrimaryKey","overwritable","runPluginHooks","runAsyncPluginHooks","Subject","mergeMap","createRxCollection","findLocalDocument","getAllDocuments","getSingleDocument","INTERNAL_STORAGE_NAME","storageChangeEventToRxChangeEvent","writeSingle","getPseudoSchemaForVersion","createRxCollectionStorageInstances","getCollectionLocalInstanceName","ObliviousSet","removeRxDatabase","databaseName","storage","idleQueue","createRxDatabaseStorageInstances","storageInstance","internalStore","docs","Promise","all","map","colDoc","id","collectionName","schema","split","version","parseInt","primaryPath","primaryKey","createStorageInstance","options","multiInstance","createKeyObjectStorageInstance","instance","localInstance","remove","localDocumentsStore","prepare","rxDatabase","_ensureStorageTokenExists","storageToken","localDocsSub","changeStream","subscribe","eventBulk","changeEventBulk","internal","events","ev","databaseToken","token","$emit","_subs","push","_prepareBroadcastChannel","_removeAllOfCollection","lockedRun","relevantDocs","filter","doc","name","writeDoc","_deleted","previous","document","then","storageTokenDocumentId","storageTokenDoc","bulkWrite","_id","value","_attachments","USED_DATABASE_NAMES","Set","DB_COUNT","RxDatabaseBase","instanceCreationOptions","password","eventReduce","broadcastChannel","destroyed","eventBulks$","observable$","pipe","emittedEventBulkIds","collections","dangerousRemoveCollectionInfo","allDocs","writeData","deletedDoc","has","add","next","writeToSocket","removeCollectionDoc","docId","_collectionNamePrimary","addCollections","collectionCreators","findDocumentsById","Object","keys","collectionDocs","internalDocByCollectionName","entries","forEach","key","schemaHashByName","args","useName","internalDoc","useArgs","hash","database","crypt","schemaHash","previousSchemaHash","previousSchema","hookData","bulkPutDocs","ret","collection","normalized","defineProperty","get","length","removeCollection","destroyPromise","destroy","knownVersions","v","storageInstances","fn","wrapCall","requestIdlePromise","exportJSON","_decrypted","_collections","importJSON","_exportedJSON","server","_options","backup","leaderElector","isLeader","waitForLeadership","migrationStates","sub","unsubscribe","col","close","throwIfDatabaseNameUsed","link","postMessage","addEventListener","createRxDatabase","ignoreDuplicate","validatePassword","isRxDatabase","obj","dbCount"],"mappings":"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","sourcesContent":["import { IdleQueue } from 'custom-idle-queue';\nimport { BroadcastChannel } from 'broadcast-channel';\n\nimport type { LeaderElector } from 'broadcast-channel';\nimport type {\n    CollectionsOfDatabase,\n    RxDatabase,\n    RxCollectionCreator,\n    RxJsonSchema,\n    RxCollection,\n    ServerOptions,\n    RxDumpDatabase,\n    RxDumpDatabaseAny,\n    AllMigrationStates,\n    ServerResponse,\n    BackupOptions,\n    RxStorage,\n    RxStorageKeyObjectInstance,\n    RxStorageInstance,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxDatabaseCreator,\n    EventBulk,\n    RxChangeEventBulk\n} from './types';\n\nimport {\n    pluginMissing,\n    flatClone,\n    PROMISE_RESOLVE_FALSE,\n    randomCouchString,\n    ensureNotFalsy,\n    PROMISE_RESOLVE_VOID\n} from './util';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    createRxSchema,\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema';\nimport { overwritable } from './overwritable';\nimport {\n    runPluginHooks,\n    runAsyncPluginHooks\n} from './hooks';\nimport {\n    Subject,\n    Subscription,\n    Observable\n} from 'rxjs';\nimport {\n    mergeMap\n} from 'rxjs/operators';\nimport {\n    createRxCollection\n} from './rx-collection';\nimport {\n    findLocalDocument,\n    getAllDocuments,\n    getSingleDocument,\n    INTERNAL_STORAGE_NAME,\n    storageChangeEventToRxChangeEvent,\n    writeSingle\n} from './rx-storage-helper';\nimport type { RxBackupState } from './plugins/backup';\nimport { getPseudoSchemaForVersion } from './rx-schema-helper';\nimport {\n    createRxCollectionStorageInstances,\n    getCollectionLocalInstanceName\n} from './rx-collection-helper';\nimport { ObliviousSet } from 'oblivious-set';\n\n/**\n * stores the used database names\n * so we can throw when the same database is created more then once.\n */\nconst USED_DATABASE_NAMES: Set<string> = new Set();\n\nlet DB_COUNT = 0;\n\n// stores information about the collections\nexport type InternalStoreDocumentData = {\n    // primary\n    collectionName: string;\n    schema: RxJsonSchema<any>;\n    schemaHash: string;\n    version: number;\n};\n\nexport class RxDatabaseBase<\n    Internals, InstanceCreationOptions,\n    Collections = CollectionsOfDatabase,\n    > {\n    constructor(\n        public readonly name: string,\n        public readonly storage: RxStorage<Internals, InstanceCreationOptions>,\n        public readonly instanceCreationOptions: InstanceCreationOptions,\n        public readonly password: any,\n        public readonly multiInstance: boolean,\n        public readonly eventReduce: boolean = false,\n        public options: any = {},\n        public readonly idleQueue: IdleQueue,\n        /**\n         * Stores information documents about the collections of the database\n         */\n        public readonly internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n        /**\n         * Stores the local documents which are attached to this database.\n         */\n        public readonly localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>,\n        /**\n         * Set if multiInstance: true\n         * This broadcast channel is used to send events to other instances like\n         * other browser tabs or nodejs processes.\n         * We transfer everything in EventBulks because sending many small events has been shown\n         * to be performance expensive.\n         */\n        public readonly broadcastChannel?: BroadcastChannel<RxChangeEventBulk>,\n    ) {\n        this.collections = {} as any;\n        DB_COUNT++;\n    }\n\n    get $(): Observable<RxChangeEvent<any>> {\n        return this.observable$;\n    }\n\n    public readonly token: string = randomCouchString(10);\n    public _subs: Subscription[] = [];\n    public destroyed: boolean = false;\n    public collections: Collections;\n    public readonly eventBulks$: Subject<RxChangeEventBulk> = new Subject();\n    private observable$: Observable<RxChangeEvent<any>> = this.eventBulks$\n        .pipe(\n            mergeMap(changeEventBulk => changeEventBulk.events)\n        );\n\n    /**\n     * Unique token that is stored with the data.\n     * Used to detect if the dataset has been deleted\n     * and if two RxDatabase instances work on the same dataset or not.\n     */\n    public storageToken?: string;\n\n    /**\n     * Contains the ids of all event bulks that have been emitted\n     * by the database.\n     * Used to detect duplicates that come in again via BroadcastChannel\n     * or other streams.\n     */\n    public emittedEventBulkIds: ObliviousSet<string> = new ObliviousSet(60 * 1000);\n\n    /**\n     * removes all internal collection-info\n     * only use this if you have to upgrade from a major rxdb-version\n     * do NEVER use this to change the schema of a collection\n     */\n    async dangerousRemoveCollectionInfo(): Promise<void> {\n        const allDocs = await getAllDocuments(this.storage, this.internalStore);\n        const writeData: BulkWriteRow<InternalStoreDocumentData>[] = allDocs.map(doc => {\n            const deletedDoc = flatClone(doc);\n            deletedDoc._deleted = true;\n            return {\n                previous: doc,\n                document: deletedDoc\n            };\n        });\n        await this.internalStore.bulkWrite(writeData);\n    }\n\n    /**\n     * This is the main handle-point for all change events\n     * ChangeEvents created by this instance go:\n     * RxDocument -> RxCollection -> RxDatabase.$emit -> MultiInstance\n     * ChangeEvents created by other instances go:\n     * MultiInstance -> RxDatabase.$emit -> RxCollection -> RxDatabase\n     */\n    $emit(changeEventBulk: RxChangeEventBulk) {\n        if (this.emittedEventBulkIds.has(changeEventBulk.id)) {\n            return;\n        }\n        this.emittedEventBulkIds.add(changeEventBulk.id);\n\n        // emit into own stream\n        this.eventBulks$.next(changeEventBulk);\n\n        // write to socket to inform other instances about the change\n        writeToSocket(this as any, changeEventBulk);\n    }\n\n    /**\n     * removes the collection-doc from the internalStore\n     */\n    async removeCollectionDoc(name: string, schema: any): Promise<void> {\n        const docId = _collectionNamePrimary(name, schema);\n        const doc = await getSingleDocument(\n            this.internalStore,\n            docId\n        );\n        if (!doc) {\n            throw newRxError('SNH', { name, schema });\n        }\n        const writeDoc = flatClone(doc);\n        writeDoc._deleted = true;\n        await this.lockedRun(\n            () => this.internalStore.bulkWrite([{\n                document: writeDoc,\n                previous: doc\n            }])\n        );\n    }\n\n    /**\n     * creates multiple RxCollections at once\n     * to be much faster by saving db txs and doing stuff in bulk-operations\n     * This function is not called often, but mostly in the critical path at the initial page load\n     * So it must be as fast as possible.\n     */\n    async addCollections<CreatedCollections = Partial<Collections>>(collectionCreators: {\n        [key in keyof CreatedCollections]: RxCollectionCreator\n    }): Promise<{ [key in keyof CreatedCollections]: RxCollection }> {\n        // get local management docs in bulk request\n        const collectionDocs = await this.lockedRun(\n            () => this.internalStore.findDocumentsById(\n                Object\n                    .keys(collectionCreators)\n                    .map(name => {\n                        const schema: RxJsonSchema<any> = (collectionCreators as any)[name].schema;\n                        return _collectionNamePrimary(name, schema);\n                    }),\n                false\n            )\n        );\n\n        const internalDocByCollectionName: any = {};\n        Object.entries(collectionDocs).forEach(([key, doc]) => {\n            internalDocByCollectionName[key] = doc;\n        });\n\n        const schemaHashByName: { [key in keyof CreatedCollections]: string } = {} as any;\n        const collections = await Promise.all(\n            Object.entries(collectionCreators)\n                .map(([name, args]) => {\n                    const useName: keyof CreatedCollections = name as any;\n                    const internalDoc = internalDocByCollectionName[_collectionNamePrimary(name, collectionCreators[useName].schema)];\n                    const useArgs: RxCollectionCreator & { name: keyof CreatedCollections; } = flatClone(args) as any;\n                    useArgs.name = useName;\n                    const schema = createRxSchema((args as RxCollectionCreator).schema);\n                    schemaHashByName[useName] = schema.hash;\n                    (useArgs as any).schema = schema;\n                    (useArgs as any).database = this;\n\n                    // TODO check if already exists and schema hash has changed\n\n                    // crypt=true but no password given\n                    if (\n                        schema.crypt &&\n                        !this.password\n                    ) {\n                        throw newRxError('DB7', {\n                            name: name as string\n                        });\n                    }\n\n                    // collection already exists\n                    if ((this.collections as any)[name]) {\n                        throw newRxError('DB3', {\n                            name\n                        });\n                    }\n\n                    // collection already exists but has different schema\n                    if (internalDoc && internalDoc.schemaHash !== schemaHashByName[useName]) {\n                        throw newRxError('DB6', {\n                            name: name,\n                            previousSchemaHash: internalDoc.schemaHash,\n                            schemaHash: schemaHashByName[useName],\n                            previousSchema: internalDoc.schema,\n                            schema: (args as RxCollectionCreator).schema\n                        });\n                    }\n\n                    // run hooks\n                    const hookData: RxCollectionCreator & { name: string; } = flatClone(args) as any;\n                    (hookData as any).database = this;\n                    hookData.name = name;\n                    runPluginHooks('preCreateRxCollection', hookData);\n\n                    return createRxCollection(useArgs, !!internalDoc);\n                })\n        );\n\n        const bulkPutDocs: BulkWriteRow<InternalStoreDocumentData>[] = [];\n        const ret: { [key in keyof CreatedCollections]: RxCollection } = {} as any;\n        collections.forEach(collection => {\n            const name: keyof CreatedCollections = collection.name as any;\n            ret[name] = collection;\n\n            // add to bulk-docs list\n            const collectionName = _collectionNamePrimary(name as any, collectionCreators[name].schema);\n            if (!internalDocByCollectionName[collectionName]) {\n                bulkPutDocs.push({\n                    document: {\n                        collectionName,\n                        schemaHash: schemaHashByName[name],\n                        schema: collection.schema.normalized,\n                        version: collection.schema.version,\n                        _attachments: {}\n                    }\n                });\n            }\n\n            // set as getter to the database\n            (this.collections as any)[name] = collection;\n            if (!(this as any)[name]) {\n                Object.defineProperty(this, name, {\n                    get: () => (this.collections as any)[name]\n                });\n            }\n        });\n\n        // make a single write call to the storage instance\n        if (bulkPutDocs.length > 0) {\n            await this.lockedRun(\n                () => this.internalStore.bulkWrite(bulkPutDocs)\n            );\n        }\n\n        return ret;\n    }\n\n    /**\n     * delete all data of the collection and its previous versions\n     */\n    removeCollection(collectionName: string): Promise<void> {\n        let destroyPromise = PROMISE_RESOLVE_VOID;\n        if ((this.collections as any)[collectionName]) {\n            destroyPromise = (this.collections as any)[collectionName].destroy();\n        }\n\n        // remove schemas from internal db\n        return destroyPromise\n            .then(() => _removeAllOfCollection(this as any, collectionName))\n            // get all relevant pouchdb-instances\n            .then(knownVersions => {\n                return Promise.all(\n                    knownVersions\n                        .map(v => {\n                            return createRxCollectionStorageInstances<any, any, any>(\n                                collectionName,\n                                this as any,\n                                {\n                                    databaseName: this.name,\n                                    collectionName,\n                                    schema: getPseudoSchemaForVersion<InternalStoreDocumentData>(v, 'collectionName'),\n                                    options: this.instanceCreationOptions,\n                                    multiInstance: this.multiInstance\n                                },\n                                {}\n                            );\n                        })\n                );\n            })\n            // remove normal and local documents\n            .then(storageInstances => {\n                return Promise.all(\n                    storageInstances.map(\n                        instance => this.lockedRun(\n                            () => Promise.all([\n                                instance.storageInstance.remove(),\n                                instance.localDocumentsStore.remove()\n                            ])\n                        )\n                    )\n                );\n            })\n            .then(() => { });\n    }\n\n    /**\n     * runs the given function between idleQueue-locking\n     */\n    lockedRun<T>(fn: (...args: any[]) => T): T extends Promise<any> ? T : Promise<T> {\n        return this.idleQueue.wrapCall(fn) as any;\n    }\n\n    requestIdlePromise() {\n        return this.idleQueue.requestIdlePromise();\n    }\n\n    /**\n     * Export database to a JSON friendly format.\n     * @param _decrypted\n     * When true, all encrypted values will be decrypted.\n     */\n    exportJSON(_decrypted: boolean, _collections?: string[]): Promise<RxDumpDatabase<Collections>>;\n    exportJSON(_decrypted?: false, _collections?: string[]): Promise<RxDumpDatabaseAny<Collections>>;\n    exportJSON(_decrypted: boolean = false, _collections?: string[]): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<db>.exportJSON()` method.\n     * @note When an interface is loaded in this collection all base properties of the type are typed as `any`\n     * since data could be encrypted.\n     */\n    importJSON(_exportedJSON: RxDumpDatabaseAny<Collections>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * spawn server\n     */\n    server(_options?: ServerOptions): Promise<ServerResponse> {\n        throw pluginMissing('server');\n    }\n\n    backup(_options: BackupOptions): RxBackupState {\n        throw pluginMissing('backup');\n    }\n\n    public leaderElector(): LeaderElector {\n        throw pluginMissing('leader-election');\n    }\n\n    public isLeader(): boolean {\n        throw pluginMissing('leader-election');\n    }\n    /**\n     * returns a promise which resolves when the instance becomes leader\n     */\n    public waitForLeadership(): Promise<boolean> {\n        throw pluginMissing('leader-election');\n    }\n\n    public migrationStates(): Observable<AllMigrationStates> {\n        throw pluginMissing('migration');\n    }\n\n    /**\n     * destroys the database-instance and all collections\n     */\n    public destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n        runPluginHooks('preDestroyRxDatabase', this);\n        DB_COUNT--;\n        this.destroyed = true;\n\n        this._subs.map(sub => sub.unsubscribe());\n\n\n        /**\n         * Destroying the pseudo instance will throw\n         * because stulff is missing\n         * TODO we should not need the pseudo instance on runtime.\n         * we should generate the property list on build time.\n         */\n        if (this.name === 'pseudoInstance') {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        // first wait until db is idle\n        return this.requestIdlePromise()\n            // destroy all collections\n            .then(() => Promise.all(\n                Object.keys(this.collections)\n                    .map(key => (this.collections as any)[key])\n                    .map(col => col.destroy())\n            ))\n            // destroy internal storage instances\n            .then(() => this.internalStore.close())\n            .then(() => this.localDocumentsStore.close())\n            // close broadcastChannel if exists\n            .then(() => this.broadcastChannel ? this.broadcastChannel.close() : null)\n            // remove combination from USED_COMBINATIONS-map\n            .then(() => USED_DATABASE_NAMES.delete(this.name))\n            .then(() => true);\n    }\n\n    /**\n     * deletes the database and its stored data\n     */\n    remove(): Promise<void> {\n        return this\n            .destroy()\n            .then(() => removeRxDatabase(this.name, this.storage));\n    }\n}\n\n/**\n * checks if an instance with same name and adapter already exists\n * @throws {RxError} if used\n */\nfunction throwIfDatabaseNameUsed(\n    name: string\n) {\n    if (!USED_DATABASE_NAMES.has(name)) {\n        return;\n    } else {\n        throw newRxError('DB8', {\n            name,\n            link: 'https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate'\n        });\n    }\n}\n\n/**\n * to not confuse multiInstance-messages with other databases that have the same\n * name and adapter, but do not share state with this one (for example in-memory-instances),\n * we set a storage-token and use it in the broadcast-channel\n */\nexport async function _ensureStorageTokenExists<Collections = any>(rxDatabase: RxDatabase<Collections>): Promise<string> {\n    const storageTokenDocumentId = 'storageToken';\n    const storageTokenDoc = await findLocalDocument<{ value: string }>(rxDatabase.localDocumentsStore, storageTokenDocumentId);\n    if (!storageTokenDoc) {\n        const storageToken = randomCouchString(10);\n        await rxDatabase.localDocumentsStore.bulkWrite([{\n            document: {\n                _id: storageTokenDocumentId,\n                value: storageToken,\n                _attachments: {}\n\n            }\n        }]);\n        return storageToken;\n    } else {\n        return storageTokenDoc.value;\n    }\n}\n\n/**\n * writes the changeEvent to the broadcastChannel\n */\nexport function writeToSocket(\n    rxDatabase: RxDatabase,\n    changeEventBulk: RxChangeEventBulk\n): Promise<boolean> {\n    if (rxDatabase.destroyed) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    if (\n        rxDatabase.multiInstance &&\n        rxDatabase.broadcastChannel &&\n        !changeEventBulk.internal &&\n        rxDatabase.token === changeEventBulk.databaseToken &&\n        rxDatabase.storageToken === changeEventBulk.storageToken\n\n    ) {\n        return rxDatabase.broadcastChannel\n            .postMessage(changeEventBulk)\n            .then(() => true);\n    } else {\n        return PROMISE_RESOLVE_FALSE;\n    }\n}\n\n/**\n * returns the primary for a given collection-data\n * used in the internal pouchdb-instances\n */\nexport function _collectionNamePrimary(name: string, schema: RxJsonSchema<any>) {\n    return name + '-' + schema.version;\n}\n\n/**\n * removes all internal docs of a given collection\n * @return resolves all known collection-versions\n */\nexport async function _removeAllOfCollection(\n    rxDatabase: RxDatabaseBase<any, any, any>,\n    collectionName: string\n): Promise<number[]> {\n    const docs = await rxDatabase.lockedRun(\n        () => getAllDocuments(rxDatabase.storage, rxDatabase.internalStore)\n    );\n    const relevantDocs = docs\n        .filter((doc) => {\n            const name = doc.collectionName.split('-')[0];\n            return name === collectionName;\n        });\n    return Promise.all(\n        relevantDocs\n            .map(\n                doc => {\n                    const writeDoc = flatClone(doc);\n                    writeDoc._deleted = true;\n                    return rxDatabase.lockedRun(\n                        () => writeSingle(\n                            rxDatabase.internalStore,\n                            {\n                                previous: doc,\n                                document: writeDoc\n                            }\n                        )\n                    );\n                }\n            )\n    ).then(() => relevantDocs.map((doc: any) => doc.version));\n}\n\nfunction _prepareBroadcastChannel<Collections>(rxDatabase: RxDatabase<Collections>): void {\n    // listen to changes from other instances that come over the BroadcastChannel\n    ensureNotFalsy(rxDatabase.broadcastChannel)\n        .addEventListener('message', (changeEventBulk: RxChangeEventBulk) => {\n            if (\n                // not same storage-state\n                changeEventBulk.storageToken !== rxDatabase.storageToken ||\n                // this db instance was sender\n                changeEventBulk.databaseToken === rxDatabase.token\n            ) {\n                return;\n            }\n            rxDatabase.$emit(changeEventBulk);\n        });\n}\n\n\n/**\n * Creates the storage instances that are used internally in the database\n * to store schemas and other configuration stuff.\n */\nasync function createRxDatabaseStorageInstances<Internals, InstanceCreationOptions>(\n    storage: RxStorage<Internals, InstanceCreationOptions>,\n    databaseName: string,\n    options: InstanceCreationOptions,\n    multiInstance: boolean\n): Promise<{\n    internalStore: RxStorageInstance<InternalStoreDocumentData, Internals, InstanceCreationOptions>,\n    localDocumentsStore: RxStorageKeyObjectInstance<Internals, InstanceCreationOptions>\n}> {\n    const internalStore = await storage.createStorageInstance<InternalStoreDocumentData>(\n        {\n            databaseName,\n            collectionName: INTERNAL_STORAGE_NAME,\n            schema: getPseudoSchemaForVersion(0, 'collectionName'),\n            options,\n            multiInstance\n        }\n    );\n\n    const localDocumentsStore = await storage.createKeyObjectStorageInstance({\n        databaseName,\n        collectionName: '',\n        options,\n        multiInstance\n    });\n\n    return {\n        internalStore,\n        localDocumentsStore\n    };\n}\n\n/**\n * do the async things for this database\n */\nasync function prepare<Internals, InstanceCreationOptions, Collections>(\n    rxDatabase: RxDatabaseBase<Internals, InstanceCreationOptions, Collections>\n): Promise<void> {\n    rxDatabase.storageToken = await _ensureStorageTokenExists<Collections>(rxDatabase as any);\n    const localDocsSub = rxDatabase.localDocumentsStore.changeStream()\n        .subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk = {\n                id: eventBulk.id,\n                internal: false,\n                storageToken: ensureNotFalsy(rxDatabase.storageToken),\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    true,\n                    ev\n                )),\n                databaseToken: rxDatabase.token\n            };\n            rxDatabase.$emit(changeEventBulk);\n        });\n    rxDatabase._subs.push(localDocsSub);\n    if (rxDatabase.multiInstance) {\n        _prepareBroadcastChannel<Collections>(rxDatabase as any);\n    }\n}\n\nexport function createRxDatabase<\n    Collections = { [key: string]: RxCollection },\n    Internals = any,\n    InstanceCreationOptions = any\n>(\n    {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance = true,\n        eventReduce = false,\n        ignoreDuplicate = false,\n        options = {}\n    }: RxDatabaseCreator<Internals, InstanceCreationOptions>\n): Promise<\n    RxDatabase<Collections, Internals, InstanceCreationOptions>\n> {\n    runPluginHooks('preCreateRxDatabase', {\n        storage,\n        instanceCreationOptions,\n        name,\n        password,\n        multiInstance,\n        eventReduce,\n        ignoreDuplicate,\n        options\n    });\n\n    if (password) {\n        overwritable.validatePassword(password);\n    }\n\n    // check if combination already used\n    if (!ignoreDuplicate) {\n        throwIfDatabaseNameUsed(name);\n    }\n    USED_DATABASE_NAMES.add(name);\n\n    let broadcastChannel: BroadcastChannel | undefined;\n    if (multiInstance) {\n        broadcastChannel = new BroadcastChannel(\n            'RxDB:' +\n            name + ':' +\n            'socket'\n        );\n    }\n\n    const idleQueue = new IdleQueue();\n\n    return createRxDatabaseStorageInstances<\n        Internals,\n        InstanceCreationOptions\n    >(\n        storage,\n        name,\n        instanceCreationOptions as any,\n        multiInstance\n    ).then(storageInstances => {\n        const rxDatabase: RxDatabase<Collections> = new RxDatabaseBase(\n            name,\n            storage,\n            instanceCreationOptions,\n            password,\n            multiInstance,\n            eventReduce,\n            options,\n            idleQueue,\n            storageInstances.internalStore,\n            storageInstances.localDocumentsStore,\n            broadcastChannel\n        ) as any;\n        return prepare(rxDatabase)\n            .then(() => runAsyncPluginHooks('createRxDatabase', rxDatabase))\n            .then(() => rxDatabase);\n    });\n}\n\n/**\n * removes the database and all its known data\n */\nexport async function removeRxDatabase(\n    databaseName: string,\n    storage: RxStorage<any, any>\n): Promise<any> {\n    const idleQueue = new IdleQueue();\n\n    const storageInstance = await createRxDatabaseStorageInstances(\n        storage,\n        databaseName,\n        {},\n        false\n    );\n\n    const docs = await getAllDocuments(storage, storageInstance.internalStore);\n    await Promise.all(\n        docs\n            .map(async (colDoc) => {\n                const id = colDoc.collectionName;\n                const schema = colDoc.schema;\n                const split = id.split('-');\n                const collectionName = split[0];\n                const version = parseInt(split[1], 10);\n                const primaryPath = getPrimaryFieldOfPrimaryKey(schema.primaryKey);\n                const [instance, localInstance] = await Promise.all([\n                    storage.createStorageInstance<InternalStoreDocumentData>(\n                        {\n                            databaseName,\n                            collectionName,\n                            schema: getPseudoSchemaForVersion(version, primaryPath as any),\n                            options: {},\n                            multiInstance: false\n                        }\n                    ),\n                    storage.createKeyObjectStorageInstance({\n                        databaseName,\n                        collectionName: getCollectionLocalInstanceName(collectionName),\n                        options: {},\n                        multiInstance: false\n                    })\n                ]);\n                await Promise.all([instance.remove(), localInstance.remove()]);\n            })\n    );\n\n    return Promise.all([\n        storageInstance.internalStore.remove(),\n        storageInstance.localDocumentsStore.remove()\n    ]);\n}\n\nexport function isRxDatabase(obj: any) {\n    return obj instanceof RxDatabaseBase;\n}\n\nexport function dbCount(): number {\n    return DB_COUNT;\n}\n"],"file":"rx-database.js"}